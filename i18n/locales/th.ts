const translations = {
  shared: {
    next: 'ดำเนินการต่อ',
    start: 'เริ่มต้น',
    copy: 'คัดลอก',
    info: 'ข้อมูล',
    copy_acknowledged: 'คัดลอกแล้ว!',
    about: 'เกี่ยวกับ',
    chapter: 'บท',
    chapters: 'บทต่างๆ',
    challenge: 'ท้าทาย',
    challenges: 'ความท้าทาย',
    coming_soon: 'เร็วๆ นี้',
    start_chapter: 'เริ่มบท',
    back: 'กลับ',
    close: 'ปิด',
    poweroff: 'กลับไปที่การเลือกบท',
    loading: 'กำลังโหลด',
  },
  ///ABOUT PAGE
  about: {
    title: 'เกี่ยวกับ',
    mobile_title: 'เกี่ยวกับอะไร',
    subtitle:
      'ปี 2139 บิตคอยน์สุดท้ายจะถูกขุดในอีกสองสัปดาห์ สำหรับหลายเดือน นาฬิกาได้เดินถอยหลังในซาโตชิสแควร์',
    intro:
      'โลกกำลังรอบล็อกสุดท้าย แล้วทันใดนั้น เครือข่ายก็หยุดชะงัก<br><br>คุณได้รับโฮโลแคทจากใครบางคนที่ใช้ชื่อซาโตชิ นากาโมโตะ (มันเหมือนกับอีโฮโลแกรมอื่นๆ แต่ตัวนี้มีรูปร่างเหมือนแมว) คุณเปิดโฮโลแคทโดยการแตะจมูกของมันด้วยความอยากรู้ว่ามันจะพูดอะไร...',

    project: {
      title: 'สร้างด้วยความสนุก',
      paragraph_one:
        'Saving Satoshi เป็นจุดเริ่มต้นที่เบาสำหรับนักเขียนโค้ดที่อยากรู้เกี่ยวกับการพัฒนาบิตคอยน์ Saving Satoshi มีการผสมผสานระหว่างข้อความทางเทคนิคและความท้าทายที่ใช้โค้ด แต่ความท้าทายเหล่านี้ควรทำได้สำหรับใครก็ตามที่มีทักษะการเขียนโค้ดพื้นฐาน โครงการนี้ฟรีและโอเพ่นซอร์ส (FOSS) และศิลปะทั้งหมดถูกสร้างขึ้นโดยใช้เครื่องมือแปลงข้อความเป็นภาพ เช่น Midjourney',
      paragraph_two:
        'โครงการนี้อยู่ในระหว่างการพัฒนาอย่างต่อเนื่องและใช้วิธีการเชิงซ้ำเพื่อรวมข้อเสนอแนะเมื่อเราปล่อยบทใหม่ๆ ขณะนี้มีการวางแผนบทไว้สิบบท อย่างไรก็ตามอาจมีการเพิ่มบทเพิ่มเติมเมื่อโครงการเติบโตขึ้น',
    },

    contributing: {
      title: 'วิธีการมีส่วนร่วม',
      paragraph_one:
        'เราเป็นโครงการโอเพ่นซอร์ส ดังนั้นทุกประตูเปิดกว้างสำหรับคุณในการช่วยกำหนดรูปแบบมัน',

      feedback: {
        title: 'ข้อเสนอแนะ',
        paragraph_one:
          'วิธีที่ดีในการมีส่วนร่วมคือการผ่านบทที่ 1 และให้ข้อเสนอแนะใดๆ เกี่ยวกับประสบการณ์โดยรวมที่คุณอาจมีโดยใช้ <a href="https://docs.google.com/forms/d/e/1FAIpQLSf1xpNqUYJyvYL5IZDnxy78273pkqzfYW2Hf91H4Do4KHgy9g/viewform" target="_blank" rel="noreferrer">แบบฟอร์มนี้</a>',
      },

      contribute: {
        title: 'มีส่วนร่วม',
        paragraph_one:
          'ยินดีต้อนรับทุกข้อเสนอแนะ รวมถึงการเปลี่ยนแปลงเนื้อหา กลไกของเกม – จริงๆ แล้วอะไรก็ได้ เรายังมองหาความช่วยเหลือในการตรวจสอบและ <a href="https://leaf-singer-0fc.notion.site/How-to-QA-5177e63f65a4406da01bc57d886b5ac2" target="_blank" rel="noreferrer">การทดสอบโค้ด</a> สำหรับการปรับปรุงโค้ด คุณสามารถเปิดปัญหาโดยตรงหรือส่งคำขอดึงบน GitHub',
        paragraph_two:
          'หากคุณต้องการมีส่วนร่วมกับการออกแบบ เรื่องราว หรือสิ่งอื่นๆ เข้าร่วมกับเราในช่อง #saving-satoshi ใน <a href="https://discord.gg/DC8Dys4G3h" target="_blank" rel="noreferrer">Bitcoin Design Discord</a> ระบุว่าคุณต้องการมีส่วนร่วมอย่างไรและเราจะช่วยชี้แนะคุณไปในทิศทางที่ถูกต้อง',
      },
    },

    contributors: {
      title: 'Enjoy!',
      contributions_by: 'ผลงานโดย',
      many_more:
        'และ <a href="https://github.com/saving-satoshi/saving-satoshi/graphs/contributors" target="_blank" rel="noreferrer">อีกมากมาย</a>',
    },

    satoshi_needs_you: 'ตอนนี้รีบหน่อย ซาโตชิต้องการคุณ',
    privacy: {
      title: 'ความมุ่งมั่นของเราต่อความเป็นส่วนตัว',
      paragraph_one:
        'ที่ Saving Satoshi เรามุ่งมั่นอย่างยิ่งที่จะรับรองความเป็นส่วนตัวและความปลอดภัยของผู้ใช้ของเรา เราเชื่อในความโปร่งใสและต้องการให้คุณเข้าใจว่าเราติดตามการใช้งานแอปอย่างไรและทำไม เพื่อให้บรรลุเป้าหมายนี้ เราใช้เครื่องมือที่มีประสิทธิภาพที่เรียกว่า <Link href="https://umami.is/" className="underline" target="_blank">Umami</Link>',
      sub_heading_one: 'Umami คืออะไร?',
      paragraph_two:
        'Umami เป็นแพลตฟอร์มวิเคราะห์โอเพ่นซอร์สที่ช่วยให้เรารวบรวมข้อมูลเชิงลึกที่จำเป็นเกี่ยวกับวิธีที่คุณใช้แอปของเรา มันช่วยให้เราตัดสินใจโดยใช้ข้อมูลและปรับปรุงผลิตภัณฑ์ของเราอย่างต่อเนื่องเพื่อตอบสนองความต้องการของคุณได้ดียิ่งขึ้น คุณสามารถดูแดชบอร์ด Umami ได้ <Link className="underline" href="https://visits.bitcoindevs.xyz/share/zFmD5WIus09mDxEf/Saving%20Satoshi" target="_blank">ที่นี่</Link>',
      sub_heading_two: 'เรารวบรวมข้อมูลอะไรบ้าง?',
      paragraph_three:
        'มั่นใจได้ว่าเรารวบรวมเฉพาะข้อมูลที่ไม่ใช่ข้อมูลส่วนบุคคลและไม่ระบุตัวตน เช่น:',
      list_item_one_title: 'การปรับปรุงผลิตภัณฑ์:',
      list_item_one_text:
        'เราใช้ข้อมูลเพื่อระบุพื้นที่ที่แอปของเราสามารถปรับปรุงได้ โดยการเข้าใจวิธีที่คุณใช้แอปของเรา เราสามารถทำให้มันมีประสิทธิภาพ ใช้งานง่าย และปลอดภัยมากขึ้น',
      list_item_two_title: 'ความเข้ากันได้:',
      list_item_two_text:
        'การเข้าใจอุปกรณ์และแพลตฟอร์มที่คุณใช้ช่วยให้เราปรับแอปของเราสำหรับการกำหนดค่าต่างๆ เพื่อให้แน่ใจว่ามันทำงานได้อย่างราบรื่นสำหรับคุณ',
      sub_heading_three: 'ความเป็นส่วนตัวของคุณสำคัญ',
      paragraph_four:
        'เราต้องการเน้นย้ำว่าความเป็นส่วนตัวของคุณมีความสำคัญสูงสุดสำหรับเรา เราไม่รวบรวมข้อมูลที่สามารถระบุตัวตนได้ และข้อมูลที่เรารวบรวมจะถูกใช้เพื่อวัตถุประสงค์ในการปรับปรุงแอปของเราเท่านั้น ข้อมูลของคุณจะไม่ถูกแชร์หรือขายให้กับบุคคลที่สาม',
      paragraph_five:
        'หากคุณมีข้อกังวลหรือคำถามเกี่ยวกับแนวทางการรวบรวมข้อมูลหรือข้อกำหนดความเป็นส่วนตัวของเรา โปรดอย่าลังเลที่จะติดต่อเรา เรามุ่งมั่นที่จะให้คุณมีประสบการณ์ที่โปร่งใสและปลอดภัยขณะใช้แอปของเรา',
    },
  },

  ///CHAPTERS TITLE PAGE
  chapter_one: {
    title: 'ความลับที่เห็นได้ชัด',
    paragraph_one:
      'ปี 2139 บิตคอยน์สุดท้ายจะถูกขุดในอีกสองสัปดาห์ สำหรับหลายเดือน นาฬิกาได้เดินถอยหลังในซาโตชิสแควร์ จนถึงจุดนี้ ทุกบล็อกมีรางวัลบิตคอยน์บางอย่าง ซึ่งเป็นเงินอุดหนุน นี่เป็นวิธีเดียวที่บิตคอยน์ใหม่จะเกิดขึ้น แต่เร็วๆ นี้มันกำลังจะเปลี่ยนแปลง หลังจากกว่าร้อยปี กำหนดการออกบิตคอยน์กำลังจะสิ้นสุดลง โลกกำลังรอบล็อกสุดท้ายที่มีเงินอุดหนุนที่จะถูกขุด มันเป็นเหตุการณ์ทางประวัติศาสตร์ สิ้นสุดยุคสมัย',
    paragraph_two: 'ทันใดนั้น เครือข่ายก็หยุดชะงัก',

    ///CHAPTER 1
    intro_one: {
      title: 'บทนำ',
      nav_title: 'การประท้วงของนักขุด',
      paragraph_one: `ไม่กี่นาทีต่อมา หน้าจอโฮเวอร์ของคุณเปิดใช้งาน`,
      paragraph_two: `—เดโบราห์ ชังค์: “โทมัส แวนเดอร์พูล ในฐานะซีอีโอที่ตัวดีของ BitRey คุณบริหารหนึ่งในพูลการขุดบิตคอยน์ที่ใหญ่ที่สุดในโลก และคุณยังผลิตเครื่องขุดบิตคอยน์ด้วย เกิดอะไรขึ้น? บิตคอยน์กำลังจะตายหรือไม่?”`,
      paragraph_three: `—แวนเดอร์พูล: “เริ่มจากจุดสูงสุด ใช่ ฉันคือ เดโบราห์ และครอบครัวแวนเดอร์พูล พ่อ และตาของฉัน ได้ขุดมาตั้งแต่บล็อกที่ 21,000 นั่นคือเหตุผลที่ฉันสามารถพูดได้อย่างมั่นใจว่านักขุดทั่วโลกกำลังทำให้เกิดความล่าช้าเหล่านี้โดยการปิดเครื่องของพวกเขา นี่คือการประท้วง ไม่มีใครต้องการให้บิตคอยน์หยุดออกที่ 21 ล้าน นักขุดไม่สามารถอยู่รอดได้ด้วยค่าธรรมเนียมเพียงอย่างเดียว”`,
      start: 'ดำเนินการต่อ',
    },

    intro_two: {
      title: 'การเริ่มต้น',
      nav_title: 'โฮโลแคทของซาโตชิ',
      paragraph_one:
        'บน Everything Watch ของคุณ คุณได้รับโฮโลแคทยี่ห้อ WhiskerWare จากใครบางคนที่ใช้ชื่อซาโตชิ นากาโมโตะ (มันเหมือนกับอีโฮโลแกรมอื่นๆ แต่ตัวนี้มีรูปร่างเหมือนแมว) คุณเปิดโฮโลแคทโดยการแตะจมูกของมัน',
      paragraph_two:
        '—“บิตคอยน์ไม่ได้กำลังจะตาย แต่มันต้องการความช่วยเหลือจากคุณ อย่าลืมแมว” – ซาโตชิ นากาโมโตะ',
      paragraph_three:
        '—ซาโตชิ? ซาโตชิคนนั้น? จากไวท์เปเปอร์? ไม่ มันเป็นไปไม่ได้ พวกเขาถูกสันนิษฐานว่าตายไปกว่าศตวรรษแล้ว',
      paragraph_four: 'ไม่ใช่หรือ?',
      paragraph_five:
        'โฮโลแคท: “คุณควรเริ่มทำงานได้แล้ว ฉันสามารถช่วยได้ แต่คุณต้องเริ่มเดี๋ยวนี้”',
    },

    genesis_one: {
      title: 'การเริ่มต้น',
      nav_title: 'ความลับของการเริ่มต้น',
      heading: 'ความท้าทายแรกของคุณ',
      paragraph_one:
        'บิตคอยน์เป็นเงินที่ต้านทานการเซ็นเซอร์ได้ ใครๆ ก็สามารถส่งเงินได้โดยการกระจายธุรกรรมไปยังเครือข่าย หลังจากการกระจาย ธุรกรรมจะถูกบรรจุเป็นบล็อกโดยนักขุด นักขุดจะแข่งขันกับนักขุดคนอื่นๆ เพื่อสิทธิ์ในการสร้างบนเชน นี่คือสิ่งที่ทำให้บิตคอยน์กระจายอำนาจ',
      paragraph_two:
        'ซาโตชิ นากาโมโตะ ผู้คิดค้นบิตคอยน์ที่ใช้นามแฝง ยังได้ขุดบล็อกบิตคอยน์แรกด้วย เขาทิ้งข้อความลับให้โลกในธุรกรรมบิตคอยน์แรกที่เคยทำ ความท้าทายแรกของคุณคือการค้นหาและถอดรหัสมัน',
    },

    genesis_two: {
      title: 'การเริ่มต้น',
      nav_title: 'ค้นหาข้อความ',
      heading: 'ค้นหาข้อความที่ซ่อนอยู่',
      paragraph_one:
        'มาค้นหาบล็อกแรกในบล็อกเชนของบิตคอยน์กัน คลิกปุ่มด้านล่างเพื่อเปิด <Tooltip id="genesis_two_paragraph_one" content="chapter_one.genesis_two.tooltip_block_explorer" theme="bg-[#30435b]">ตัวสำรวจบล็อก</Tooltip> ที่บล็อก 0 ซึ่งเรียกว่าบล็อกการเริ่มต้น',
      paragraph_two:
        'เลื่อนลงและขยายรายละเอียดของธุรกรรมหนึ่งที่ถูกเก็บไว้ในบล็อกนี้ ค้นหาข้อมูลที่เรียกว่า “Coinbase” ตอนนี้มองหาป้ายชื่อ “SCRIPTSIG (<Tooltip id="genesis_two_paragraph_two" content="chapter_one.genesis_two.tooltip_hex" theme="bg-[#30435b]">HEX</Tooltip>)” ค่าที่อยู่ข้างๆ คือข้อความที่ถูกเข้ารหัส',
      paragraph_three: 'คัดลอกค่านั้นและวางในบล็อกโค้ด',
      tooltip_block_explorer:
        '<a href="https://bitcoinops.org/en/topics/block-explorers/" target="_blank" rel="noreferrer">ตัวสำรวจบล็อก</a> เป็นเครื่องมือที่มีประโยชน์ในการค้นหาข้อมูลเกี่ยวกับธุรกรรมบิตคอยน์อย่างรวดเร็ว',
      tooltip_hex:
        'ย่อมาจากเลขฐานสิบหก ซึ่งเป็นระบบตัวเลขที่แสดงตัวเลขโดยใช้ฐาน 16',
      view_block_0: 'ดูบล็อก 0',
      placeholder: 'วางค่าที่คุณพบที่นี่',
    },

    genesis_three: {
      title: 'การเริ่มต้น',
      nav_title: 'ถอดรหัสข้อความ',
      heading: 'มาถอดรหัสข้อความกันเถอะ',
      paragraph_one:
        'ข้อความที่คุณพบถูกเข้ารหัสในรูปแบบที่เรียกว่า HEX ตอนนี้เราจะรันคำสั่งเพื่อแปลงมันเป็น ASCII ซึ่งเราจะสามารถอ่านได้',
      paragraph_two:
        'คัดลอกและวางคำสั่งด้านล่างลงในเทอร์มินัลในบล็อกโค้ดและกด “Enter”',
      terminal_challenge_lines: `ป้อนคำสั่งของคุณที่นี่และกด Enter...\n ตัวแปร $scriptSigHex ถูกกำหนดไว้ให้คุณแล้ว\n\n var $scriptSigHex = '04fff...e6b73'`,
      waiting_for_input: 'รอให้คุณเขียนและรันสคริปต์...',
      success: `ทำได้ดีมาก! ข้อความที่ถอดรหัสอ้างอิงถึงหน้าหนึ่งของ <Link href="https://en.bitcoin.it/wiki/Genesis_block" target="_blank" className="underline">The Times</Link> จากวันที่ 3 มกราคม 2009 ซึ่งเป็นวันเดียวกับที่ซาโตชิขุดบล็อกการเริ่มต้น มันเจ๋งแค่ไหน?! ข้อความนี้ยังให้ข้อมูลเชิงลึกเกี่ยวกับแรงจูงใจของเขาในการสร้างบิตคอยน์\n\n มาต่อกันเถอะ`,
    },

    genesis_four: {
      title: 'การเริ่มต้น',
      nav_title: 'ความสำเร็จครั้งแรกของคุณ',
      subtitle: 'ยินดีด้วย! คุณทำความท้าทายแรกสำเร็จแล้ว!',
      paragraph_one:
        'คุณพบข้อความลับที่ซาโตชิ นากาโมโตะฝังไว้ในบล็อกการเริ่มต้น ถึงเวลาขยายสิ่งที่คุณเพิ่งเรียนรู้ ถอดรหัสเบาะแสสำคัญเกี่ยวกับเรื่องราวในความท้าทายถัดไป',
    },

    transacting_one: {
      title: 'การทำธุรกรรม',
      nav_title: 'อะไรอยู่ในธุรกรรม',
      heading: 'อะไรอยู่ในธุรกรรม?',
      paragraph_one:
        'ส่วนประกอบหลักสองส่วนของธุรกรรมคืออินพุตและเอาต์พุต ในแบบฝึกหัดก่อนหน้านี้ เราได้ถอดรหัสข้อความลับที่พบในอินพุตของธุรกรรม ครั้งนี้เราจะถอดรหัสข้อความที่อยู่ในส่วนเอาต์พุต',
      paragraph_two: 'สำหรับธุรกรรมต่อไปนี้ เราจะระบุเอาต์พุตประเภท OP_RETURN',
    },

    transacting_two: {
      title: 'การทำธุรกรรม',
      nav_title: 'ค้นหา OP_RETURN',
      heading: 'OP_RETURN',
      paragraph_one:
        'มีอีกวิธีหนึ่งในการซ่อนข้อความลับในธุรกรรม บิตคอยน์มีรหัสประเภทพิเศษที่เรียกว่า OP_RETURN ซึ่งช่วยให้ผู้ใช้สามารถแนบข้อความไปกับเอาต์พุตของธุรกรรมได้ มาดูกันว่าเราจะหามันเจอไหม',
      paragraph_two:
        '1. คลิก <Link href="https://blockstream.info/tx/ff9148605a772a51cba39004df5fb042d40515967a3e38ff5294cfd017c452a9" target="_blank" className="underline">ที่นี่</Link> เพื่อดูธุรกรรมเฉพาะ',
      paragraph_three: '2. เปิดรายละเอียดและค้นหาส่วนที่เป็นประเภท “OP_RETURN”',
      paragraph_four:
        '3. ตอนนี้ค้นหาช่อง “SCRIPTPUBKEY (ASM)” เห็นส่วน “OP_RETURN OP_PUSHBYTES_33” ไหม? สิ่งเหล่านี้เรียกว่าออปโค้ด เราสนใจสิ่งที่อยู่หลังจากนั้น',
      paragraph_five:
        '4. คัดลอกสตริงยาวของตัวเลขหลัง “OP_RETURN OP_PUSHBYTES_33” และวางในบล็อกโค้ด',
      input_challenge_label: 'ป้อนประเภท OP_RETURN',
    },

    transacting_three: {
      title: 'การทำธุรกรรม',
      nav_title: 'ถอดรหัส OP_RETURN',
      heading: 'ข้อความลับอีกข้อความหนึ่ง',
      paragraph_one: 'เราได้ระบุส่วนของเอาต์พุตธุรกรรมที่มีข้อความแล้ว',
      paragraph_two:
        'สิ่งที่เหลืออยู่ตอนนี้คือการถอดรหัสมัน เหมือนที่เราทำในแบบฝึกหัดก่อนหน้านี้ คุณสามารถดูธุรกรรมอีกครั้งได้ <Link href="https://blockstream.info/tx/ff9148605a772a51cba39004df5fb042d40515967a3e38ff5294cfd017c452a9?expand" className="underline">ที่นี่</Link>',
      terminal_challenge_success:
        'ถูกต้อง! ทำได้ดีมาก\n\n อย่างที่คุณเห็น เบาะแสคือที่อยู่ ไปที่นั่น\n\n ความท้าทายถัดไปของคุณรออยู่',
      terminal_challenge_lines:
        'ป้อนคำสั่งของคุณที่นี่และกด Enter...\n\n คำสั่ง: \n echo $scriptPubKeyBytes | xxd -r -p \n\n โปรดทราบว่า $scriptPubKeyBytes ไม่ได้ถูกกำหนดไว้ให้คุณในครั้งนี้ คุณจะต้องแทนที่ตัวแปรนี้ในโค้ดด้วยค่าที่คุณพบในหน้าก่อนหน้า',
      terminal_challenge_error:
        'เกือบแล้ว! จำไว้ว่าตัวแปร $scriptPubKeyBytes ไม่ได้ถูกตั้งค่าให้คุณในครั้งนี้',
    },

    outro_one: {
      title: 'บทส่งท้าย',
      nav_title: 'การผจญภัยเรียกหา',
      paragraph_one:
        'คุณวิ่งลงไปที่โรงรถของคุณ ก้าวเข้าไปใน Budgetcopter เก่าของพ่อคุณ ป้อนพิกัด และมุ่งหน้าไปยังเขต 21',
      paragraph_two:
        'แม้ว่าคุณจะมีอาการแพ้แมวอย่างรุนแรงจนแม้แต่โฮโลแกรมก็ยังแพ้ แต่โฮโลแคทก็มาด้วย คุณคัดค้าน แต่แมวก็คือแมว',
      button_text: 'จบบทที่ 1',
    },

    outro_two: {
      title: 'คุณทำได้!',
      nav_title: 'จบบท',
      description:
        'น่าทึ่งมาก คุณจบบทแรกและเรียนรู้มากมายเกี่ยวกับแฮชและธุรกรรม เป็นอย่างไรบ้าง?',
    },

    end: {
      save: 'บันทึกความก้าวหน้าของฉัน',
      next: 'ดำเนินการต่อโดยไม่บันทึก',
      feedback: 'แบ่งปันข้อเสนอแนะของคุณ',
    },
    resources: {
      genesis_two: {
        scriptsig_heading: 'ScriptSig',
        scriptsig_paragraph:
          " 'scriptSig' คือสคริปต์ที่คุณให้เป็นส่วนหนึ่งของอินพุตในธุรกรรมใหม่ของคุณ มันเป็นสคริปต์ปลดล็อกของคุณ ซึ่งพิสูจน์ว่าคุณมีอำนาจในการใช้จ่ายบิตคอยน์จาก UTXO ที่อ้างอิง 'scriptSig' คือข้อมูลที่เข้าสู่ฟิลด์ scriptSig ของอินพุต",
        block_explorer_heading: 'ตัวสำรวจบล็อก',
        block_explorer_paragraph:
          'ตัวสำรวจบล็อกเป็นเครื่องมือสำคัญสำหรับการนำทางและทำความเข้าใจเครือข่ายบล็อกเชน มันทำหน้าที่เป็นอินเทอร์เฟซที่ใช้งานง่ายในการตรวจสอบและวิเคราะห์ข้อมูลที่เก็บไว้ในบล็อกเชน ด้วยตัวสำรวจบล็อก ผู้ใช้สามารถสำรวจประวัติธุรกรรม ดูยอดคงเหลือในบัญชี และติดตามความคืบหน้าของบล็อกและธุรกรรมแต่ละรายการ',
        tip: 'มองหาหมวดหมู่ scriptSig(Hex) ที่ซ้อนอยู่ในอินพุต coinbase หลังจากขยายธุรกรรมภายในบล็อก',
      },
      genesis_three: {
        bash_heading: 'คำสั่ง Bash',
        bash_paragraph:
          'เราใช้คำสั่ง bash พื้นฐานและตัวเลือกบางอย่างเพื่อย้อนกลับการบีบอัดที่ซาโตชิทำกับข้อความที่ใส่ในบล็อกการเริ่มต้น',
        tip: "คำสั่ง 'xxd' จะเปลี่ยนไฟล์เป็นเลขฐานสิบหกและการเพิ่มแท็ก '-r' จะย้อนกลับมันทำให้เลขฐานสิบหกถูกแปลเป็นข้อความ แท็ก '-p' จากนั้นพิมพ์มันไปที่คอนโซลทำให้คุณสามารถอ่านผลลัพธ์ได้",
      },
      transacting_two: {
        transactions_heading: 'ธุรกรรม',
        transactions_paragraph:
          'ธุรกรรมในโลกของสกุลเงินดิจิทัลเปรียบเสมือนการชำระเงินแบบอะตอมเดียว ซึ่งเกี่ยวข้องกับกระบวนการทำลายเหรียญที่มีอยู่และสร้างเหรียญใหม่ เมื่อมีคนเริ่มธุรกรรมสกุลเงินดิจิทัล พวกเขากำลังสั่งให้บล็อกเชนโอนจำนวนเหรียญที่เฉพาะเจาะจงจากกระเป๋าเงินดิจิทัลหนึ่งไปยังอีกกระเป๋าหนึ่ง เพื่อให้บรรลุเป้าหมายนี้ ธุรกรรมจะใช้เหรียญที่มีอยู่ของผู้ส่งและสร้างเหรียญใหม่สำหรับผู้รับ ซึ่งจะอัปเดตบัญชีแยกประเภทการเป็นเจ้าของ',
        bitcoin_script_heading: 'สคริปต์บิตคอยน์',
        bitcoin_script_paragraph:
          'สคริปต์บิตคอยน์เป็นภาษาการเขียนโปรแกรมแบบสแต็กที่เรียบง่ายที่ใช้ในธุรกรรมบิตคอยน์เพื่อกำหนดเงื่อนไขที่บิตคอยน์สามารถใช้จ่ายได้ มันประกอบด้วยออปโค้ดต่างๆ (ย่อมาจากรหัสปฏิบัติการ) ที่ระบุว่าควรดำเนินการใดกับข้อมูลภายในสคริปต์',
        tip: 'จาก Op_Code: OP_Pushbytes_33 เรากำลังมองหาสตริงยาว 33 ไบต์ (66 อักขระทั้งหมด) ใน OP_Return ของธุรกรรม',
      },
      transacting_three: {
        secrets_heading: 'ความลับในบิตคอยน์',
        secrets_paragraph:
          'ตามที่เราเห็นจากความท้าทายก่อนหน้านี้ ความลับที่ฝังอยู่ในสคริปต์บิตคอยน์เป็นส่วนหนึ่งของประวัติศาสตร์ตั้งแต่บล็อกการเริ่มต้น ไม่ว่าจะใช้เพื่อเก็บข้อมูลบางอย่างในบล็อกเชน เพื่อส่งข้อมูลผ่านสคริปต์บิตคอยน์เพื่อให้มีค่าภายนอกบิตคอยน์ หรือเพื่อส่งข้อความถึงผู้อื่น ผู้คนได้เก็บสิ่งต่างๆ ไว้ในบล็อกเชนนอกเหนือจากอินพุตและเอาต์พุตตั้งแต่เริ่มต้น',
        tip: "เมื่อถอดรหัสสตริงด้วยคำสั่ง 'xxd' จำไว้ว่าครั้งนี้เราไม่ได้ใช้ตัวแปร เราต้องป้อนสตริงทั้งหมด",
      },
    },
  },

  chapter_two: {
    title: 'วางแผน',
    paragraph_one:
      'พิกัดที่ซาโตชิให้คุณไม่ทำให้ผิดหวัง น่าเสียดายที่มันเป็นโกดัง และเป็นโกดังที่น่ากลัวและร้าง',
    paragraph_two:
      'คุณวนรอบโกดังใน Budgetcopter ของคุณไม่น้อยกว่าสามครั้ง ใช่ คุณอาจจะต้องเข้าไปในนั้น Budget Heat Detector ของ Budgetcopter ของคุณตรวจไม่พบอะไรนอกจากความมืด หากมีใครรู้ว่าที่นี่มีอยู่ มันก็เป็นเวลานานแล้วที่พวกเขาเยี่ยมชมมันในความทรงจำของพวกเขาเท่านั้น',

    intro_one: {
      title: 'บทนำ',
      nav_title: 'โกดัง',
      paragraph_one:
        '—โฮโลแคท: “โอ้ ที่นี่มันแย่จริงๆ ที่นี่ควรจะมี e-anchovies เก็บไว้ที่ไหนสักแห่ง ฉันยอมรับ CyberKibble ก็ได้.."',
      paragraph_two:
        'คุณลงจอด ตั้งสติ และค้นหาจุดเข้าไป ที่นั่น หน้าต่างที่แตกน่าจะใช้ได้ คุณใช้ก้อนอิฐทุบหน้าต่างที่เหลือและกระโดดเข้าไปข้างใน อาคารเต็มไปด้วยเครื่องขุดบิตคอยน์ที่มีฝุ่นเกาะและได้รับการอนุรักษ์ไว้อย่างดีหลายพันเครื่อง',
      paragraph_three: {
        a: '—โฮโลแคท: “นี่ไม่ใช่โกดัง นี่คือพิพิธภัณฑ์ ฉันคิดว่านี่คือเครื่องขุด ASIC ของครอบครัวแวนเดอร์พูล ในช่วงแรกๆ ของบิตคอยน์ นักขุดจะใช้คอมพิวเตอร์ทั่วไปในการขุดบิตคอยน์ แต่หลังจากไม่กี่ปี นักขุดก็ตระหนักว่าพวกเขาสามารถใช้เครื่องที่มีชิปพิเศษที่เรียกว่า Application-Specific Integrated Circuit หรือ ',
        b: ' ชิปเหล่านี้ทำได้เพียงอย่างเดียว: ขุดบิตคอยน์ การมุ่งเน้นที่แคบของพวกเขาเพิ่มประสิทธิภาพและช่วยให้นักขุดใช้พลังงานน้อยลงในการขุด ทำให้พวกเขาได้เปรียบ คุณเชื่อไหมว่าครั้งหนึ่งผู้คนเคยขุดด้วยแล็ปท็อปของพวกเขา?"',
      },
      paragraph_four:
        'นี่อธิบายเครื่องจักรทั้งหมดในคอลเลกชันของครอบครัวแวนเดอร์พูล',
      tooltip_one: {
        question: 'ASIC miner คืออะไร?',
        link: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=What%2520is%2520an%2520ASIC%2520miner%253F',
        highlighted: 'ASIC',
      },
    },

    intro_two: {
      title: 'วางแผน',
      nav_title: 'เปิดคอมพิวเตอร์',
      paragraph_one:
        'ในมุมหนึ่ง มีจอมอนิเตอร์คอมพิวเตอร์ที่มืดและแทบจะใช้งานไม่ได้พร้อมโน้ตติดอยู่ มันกระพริบอยู่ โน้ตบอกว่า “เปิดมันสิ เจ้าโง่"',
      paragraph_two: `—โฮโลแคท: “หยาบคายจริงๆ ว้าว; คีย์บอร์ดกลไก ฉันเคยได้ยินเกี่ยวกับสิ่งเหล่านี้ พวกมันดังมากจนทำให้ผู้ใช้สูญเสียการได้ยินและถูกแบน”`,
      paragraph_three:
        'โฮโลแคทกระโดดขึ้นไปบนคีย์บอร์ดและเดินข้ามมัน แสดงให้คุณเห็นว่าต้องกดปุ่มไหน',
    },

    hashing_one: {
      title: 'ศูนย์',
      nav_title: 'คอมพิวเตอร์เริ่มทำงาน',
      paragraph_one:
        'ไม่ว่าจะโดยบังเอิญหรือเพราะโฮโลแคทรู้จริงๆ ว่าเธอกำลังทำอะไร ตัวอักษรและตัวเลขสุ่มที่เธอเหยียบกลายเป็น... ตัวอักษรและตัวเลขสุ่มมากขึ้น?',
      list_one: '> QX23Y6VGECTUKSNIEUTUB[P[pihof',
      list_two:
        '> 1c31d1d9fb848a505fc0cdbea848ff1bdd46a9ed4d639d413d3a93035194eedf',
      paragraph_two: 'จอแสดงผล "แฮชไม่ถูกต้อง ลองอีกครั้ง"',
      paragraph_three:
        'แน่นอนว่าอะไรก็ตามที่โฮโลแคทพิมพ์ผิด เธอเป็นแค่แมวโฮโลกราฟิกที่ซ่า!',
      paragraph_four: 'จะเกิดอะไรขึ้นถ้าคุณพิมพ์อย่างอื่น?',
    },

    hashing_two: {
      title: 'ศูนย์',
      nav_title: 'ลองแฮชบางอย่าง',
      heading: 'ป้อนอะไรก็ได้',
      return_hash: 'ด้านล่างคุณจะเห็นอินพุตของคุณถูกแปลงเป็นแฮช',
      progress_message: 'ทำต่อไป...',
      success_message: 'ดีมาก เล่นสนุกกันพอแล้ว ไปต่อกันเถอะ',
    },

    hashing_three: {
      title: 'ศูนย์',
      nav_title: 'พลังของ SHA256',
      heading: 'คุณสังเกตเห็นอะไรพิเศษเกี่ยวกับแฮชไหม?',
      list_one:
        'เหมือนกับลายนิ้วมือ แฮชมีความเฉพาะตัว ยกเว้นในบางกรณีพิเศษ แฮชสำหรับสองสิ่งที่แตกต่างกันไม่ควรเหมือนกัน',
      list_two:
        'ฟังก์ชันแฮชเป็นถนนทางเดียว คุณไม่สามารถย้อนกลับแฮชเพื่อหาข้อมูลที่ใช้สร้างมันได้',
      list_three:
        'แฮชมีความน่าเชื่อถืออย่างมากในแง่ที่ว่ามันเป็นแบบกำหนดได้ ซึ่งหมายความว่าคุณสามารถแฮชข้อมูลชิ้นเดียวกันซ้ำๆ และคุณจะได้ผลลัพธ์เดียวกันเสมอ',
      paragraph_one: {
        a: 'ฟังก์ชันที่ใช้ที่นี่เรียกว่า ',
        b: 'เป็นตัวเลือกที่ได้รับความนิยมมาก',
      },
      paragraph_two: 'ตอนนี้ มาดูกันว่าคุณสามารถหาแฮชที่เฉพาะเจาะจงได้หรือไม่',
      paragraph_three:
        'ค้นหาแฮชที่ขึ้นต้นด้วยศูนย์ (“0”) พิมพ์สิ่งต่างๆ ด้านล่างจนกว่าคุณจะพบแฮชที่เราต้องการ',
      tooltip_one: {
        question: 'SHA-256 ใช้ในบิตคอยน์อย่างไร?',
        link: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=how%2520is%2520SHA-256%2520used%2520in%2520bitcoin%253F',
        highlighted: 'SHA-256',
      },
    },

    hashing_four: {
      title: 'ศูนย์',
      nav_title: 'ค้นหาแฮชที่มีศูนย์',
      heading: 'ป้อนอะไรก็ได้จนกว่าคุณจะพบแฮชที่ขึ้นต้นด้วยศูนย์ (“0”)',
      hint_prompt:
        'ต้องการ <Tooltip id="hint_prompt" position="bottom" theme="bg-[#5e212a]" offset="-1" content="chapter_two.hashing_four.hint_tooltip">คำใบ้</Tooltip> ไหม?',
      hint_tooltip:
        '<span className="text-m whitespace-nowrap leading-none text-white/50">ลองพิมพ์:</span> <span className="whitespace-nowrap text-white">ป๊อปคอร์น</span>',
    },

    hashing_five: {
      title: 'ศูนย์',
      nav_title: 'เพิ่มความยาก',
      heading: 'นั่นไม่ยากเกินไป!',
      paragraph_one:
        'มาทำให้มันยากขึ้นอีกนิด ลองหาแฮชที่ขึ้นต้นด้วยศูนย์สองตัว ("00")',
    },

    hashing_six: {
      title: 'ศูนย์',
      nav_title: 'ค้นหาแฮชที่มีศูนย์สองตัว',
      heading: 'ป้อนอะไรก็ได้จนกว่าคุณจะพบแฮชที่ขึ้นต้นด้วยศูนย์สองตัว (“00”)',
      hint_prompt:
        'ต้องการ <Tooltip id="hint_prompt" position="bottom" theme="bg-[#5e212a]" offset="-1" content="chapter_two.hashing_six.hint_tooltip">คำใบ้</Tooltip> ไหม?',
      hint_tooltip:
        '<span className="text-m whitespace-nowrap leading-none text-white/50">ลองพิมพ์:</span> <span className="whitespace-nowrap text-white">ตรีโกณมิติ</span>',
    },

    scripting_one: {
      title: 'การทำงานอัตโนมัติ',
      nav_title: 'แฮช nonce',
      heading: 'ให้คอมพิวเตอร์ทำสิ่งนี้ให้เรา',
      paragraph_one:
        'โอเค นั่นอาจใช้เวลานานกว่าที่คุณคิด ตอนนี้ลองจินตนาการถึงการหาแฮชที่ขึ้นต้นด้วยศูนย์ห้าหรือสิบตัว นี่คือความท้าทายที่เครือข่ายบิตคอยน์กำหนดให้นักขุดเมื่อพวกเขาต้องการส่งบล็อกใหม่พร้อมธุรกรรม',
      paragraph_two:
        'นักขุดรวบรวมข้อมูลทั้งหมดที่ต้องการใส่ในบล็อก เช่น แฮชส่วนหัวของบล็อกก่อนหน้า แฮชของธุรกรรมที่จะรวมในบล็อก (รวมถึงธุรกรรม coinbase) เวลา และรวมกับตัวเลขสุ่มที่เรียกว่า nonce (หมายเลขที่ใช้เพียงครั้งเดียว) พวกเขาส่งทั้งหมดนี้เข้าสู่ฟังก์ชันแฮชเพื่อสร้างสิ่งที่เรียกว่าแฮชบล็อก',
      paragraph_three:
        'เมื่อบิตคอยน์เปิดตัวครั้งแรก นักขุดจะวนรอบ nonce ในส่วนหัวของบล็อกโดยเพิ่มข้อมูลในฟิลด์ 32 บิตทีละ 1 อย่างไรก็ตาม เมื่อเวลาผ่านไป นักขุดมีประสิทธิภาพและทรงพลังมากขึ้น ความยากก็เพิ่มขึ้น ไม่นานมันก็สูงมากจนเป็นเรื่องปกติที่จะใช้ความเป็นไปได้ทั้งหมดสำหรับฟิลด์ 32 บิตโดยไม่พบวิธีแก้ปัญหาเดียวที่ต่ำกว่า',
      paragraph_four:
        'เพื่อแก้ไขปัญหานี้ นักขุดเริ่มเปลี่ยนส่วนอื่นๆ ของส่วนหัวของบล็อก เช่น เวลา หรือธุรกรรมที่รวมอยู่ในบล็อก',
      paragraph_five:
        'เครือข่ายบิตคอยน์มีการตั้งค่าความยากและยอมรับเฉพาะแฮชบล็อกที่ขึ้นต้นด้วยศูนย์จำนวนหนึ่งเท่านั้น เราเรียกสิ่งนี้ว่า “ความยาก” และจะปรับทุกๆ 2016 บล็อก',
      paragraph_six:
        'สำหรับความท้าทายต่อไป เขียนสคริปต์ที่หาแฮชที่ขึ้นต้นด้วยศูนย์ห้าตัว (00000)',
      tooltip_one: {
        question: 'ความยากเป้าหมายคืออะไร?',
        link: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520is%2520target%2520difficulty%253F',
        highlighted: 'ความยากเป้าหมาย',
      },
    },

    scripting_two: {
      title: 'การทำงานอัตโนมัติ',
      nav_title: 'สร้างฟังก์ชันแฮช',
      paragraph_one:
        'โอเค ถึงเวลาที่จะเขียนและรันโค้ดของคุณเองแล้ว เขียนสคริปต์ที่สร้างแฮช sha256 ที่ขึ้นต้นด้วยศูนย์ห้าตัว ("00000...") โค้ดของคุณควรเรียกฟังก์ชัน sha256 ซ้ำๆ ด้วยอินพุตที่แตกต่างกันจนกว่าผลลัพธ์จะเป็นไปตามข้อกำหนดนี้ คุณควรลองเพิ่มจำนวนเต็มภายในลูปเพื่อให้ได้อินพุตที่แตกต่างกัน ในการเข้ารหัสลับ ตัวเลขนี้อาจเรียกว่า "nonce" หรือ "หมายเลขที่ใช้เพียงครั้งเดียว"',
      python: {
        paragraph_two:
          'เมื่อคุณพบ nonce ที่มีแฮชที่ขึ้นต้นด้วยศูนย์ห้าตัว ให้ส่งคืนแฮชไปยังคอนโซล เราใช้ไลบรารี hashlib ใน python เพื่อช่วยคุณในการสร้างฟังก์ชันนี้ คุณสามารถใช้แหล่งข้อมูลภายนอกต่อไปนี้เพื่อช่วยคุณเขียนฟังก์ชันนี้หากจำเป็น:',
        list_one:
          '<Link href="https://docs.python.org/3/library/hashlib.html" target="_blank" className="underline">เอกสาร hashlib</Link>',
        list_two:
          '<Link href="https://datagy.io/python-sha256/" target="_blank" className="underline">บทเรียนฟังก์ชัน python</Link>',
      },
      javascript: {
        paragraph_two:
          'เมื่อคุณพบ nonce ที่มีแฮชที่ขึ้นต้นด้วยศูนย์ห้าตัว ให้ส่งคืนแฮชไปยังคอนโซล เราใช้ไลบรารี crypto ใน JavaScript เพื่อช่วยคุณในการสร้างฟังก์ชันนี้ คุณสามารถใช้แหล่งข้อมูลภายนอกต่อไปนี้เพื่อช่วยคุณเขียนฟังก์ชันนี้หากจำเป็น:',
        list_one:
          '<Link href="https://www.geeksforgeeks.org/node-js-crypto-createhash-method/" target="_blank" className="underline">เอกสาร crypto</Link>',
        list_two:
          '<Link href="https://www.educative.io/answers/what-is-node-cryptocreatehashalgorithm-options" target="_blank" className="underline">บทเรียนฟังก์ชัน JavaScript</Link>',
      },
      success: 'ศูนย์ห้าตัว! นั่นแหละ!',
    },

    mining_one: {
      title: 'เข้าสู่เหมือง',
      nav_title: 'การขุดบล็อก',
      heading_one:
        'ตอนนี้เรารู้แล้วว่าการขุดทำงานอย่างไร มาดูมันในการปฏิบัติกันเถอะ',
      heading_two: 'คุณกำลังขุดอยู่ตอนนี้',
      heading_three: 'ทำได้ดี!',
      heading_four: 'มาขุดให้ครบ 100 บล็อกกันเถอะ',
      heading_five: 'คุณทำได้!',
      paragraph_one:
        'ตอนนี้ เครือข่ายบิตคอยน์ต้องการให้บล็อกมีแฮชที่มีศูนย์นำหน้าสิบตัว มาลุยกันเถอะ!',
      paragraph_two:
        'สำหรับการจำลองง่ายๆ นี้ เราจะสมมติว่าทุกบล็อกมีธุรกรรม 3,500 รายการและรางวัลและค่าธรรมเนียม 0.061 BTC',
      paragraph_two_one: 'ดูว่าคุณสามารถเปิดเครื่องขุดได้หรือไม่',
      paragraph_three:
        'โค้ดที่คุณเขียนในบทเรียนก่อนหน้านี้เพื่อคำนวณแฮชซ้ำๆ กำลังทำงานอยู่',
      paragraph_four: 'มันจะหยุดเมื่อพบแฮชที่มีศูนย์นำหน้าสิบตัว',
      paragraph_five:
        'เห็นฟิลด์ nonce เพิ่มขึ้นไหม? นั่นคือจำนวนแฮชที่คุณลองจนถึงตอนนี้!',
      paragraph_six: 'ด้วย nonce ต่อไปนี้:',
      paragraph_seven: 'แฮชที่ได้คือ:',
      paragraph_eight:
        'มันมีศูนย์นำหน้าสิบตัวที่บล็อกใหม่ทั้งหมดต้องการ มาขุดบล็อกเพิ่มกันเถอะ',
      paragraph_eight_one: 'เปิดเครื่องขุดอีกครั้ง',
      paragraph_nine:
        'นี่อาจใช้เวลาสักครู่ แต่นี่แสดงให้คุณเห็นว่าการขุดบล็อกและยืนยันธุรกรรมยากแค่ไหน',
      paragraph_ten:
        'ว้าว! นั่นใช้พลังการคำนวณมากทีเดียวในการทำแฮชทั้งหมดนั้น ลองดูจำนวน nonce ที่ถูกลอง! มันช่วยได้มากที่มีการเพิ่มพลังแฮช นั่นคือจำนวนแฮชที่คอมพิวเตอร์ของคุณสามารถลองได้ในหนึ่งวินาที',
      paragraph_eleven:
        'ตามที่คาดไว้ เนื่องจากแต่ละบล็อกมีธุรกรรม 3,500 รายการ ธุรกรรมทั้งหมด 350,000 รายการได้รับการยืนยันโดย 100 บล็อกที่ถูกขุด',
      paragraph_twelve:
        'และดูเหมือนว่าคุณจะได้รับรางวัลที่ดีสำหรับการขุดทั้งหมดนี้! นอกเหนือจากเงินอุดหนุนบล็อก จำนวนบิตคอยน์ที่เครือข่ายให้รางวัลสำหรับแต่ละบล็อก คุณยังสามารถเก็บรายได้เพิ่มเติมในรูปแบบของค่าธรรมเนียมการทำธุรกรรมได้อีกด้วย',
      paragraph_thirteen:
        'จำไว้ว่านี่เป็นเพียงการจำลอง แต่ละบล็อกควรใช้เวลาเฉลี่ย 10 นาที',
      paragraph_fourteen:
        'นอกจากนี้ หากเรากำลังขุดใน mainnet ปัจจุบันจริงๆ จะต้องใช้พลังการคำนวณมากกว่านี้หลายเท่าในการขุดบล็อกเหล่านี้',
      progress_bar_title: 'บล็อกที่พบ',
      progress_bar_one: 'Nonce',
      progress_bar_two: 'แฮชต่อวินาที',
      progress_bar_three: 'ธุรกรรมที่ยืนยันแล้ว',
      progress_bar_four: 'บิตคอยน์ที่ได้รับ',
      button_hash: 'พลังแฮช 10 เท่า, กรุณา',
      ten_x_hint: 'แตะปุ่ม 100x เพื่อเร่งการแฮช!',
    },
    outro_one: {
      title: 'บทส่งท้าย',
      nav_title: 'บทเสร็จสมบูรณ์',
      heading: 'ทำได้ดีมาก!',
      paragraph_one:
        'เครื่องจักรเริ่มทำงาน ทุกอย่างดูเหมือนจะทำงานได้ดี แผนที่ปรากฏบนจอมอนิเตอร์เก่าที่แสดงตำแหน่งของโกดังอื่น ๆ ที่เต็มไปด้วย ASICs ที่เปิดใช้งานทั่วโลก ดูเหมือนว่าพวกมันจะถูกเปิดใช้งานเมื่อคุณทำภารกิจการขุดเสร็จสิ้น!',
      paragraph_two: '—HOLOCAT: “ดูสิ มีข้อความมา”',
      paragraph_three:
        '“ทำได้ดี นี่จะช่วยให้บิตคอยน์กลับมาสร้างบล็อกได้ทุก ๆ สิบนาที” – ซาโตชิ นากาโมโตะ',
      paragraph_four: 'เขาอีกแล้วเหรอ?',
    },
    resources: {
      hashing_two: {
        hash_functions_heading: 'ฟังก์ชันแฮช',
        hash_functions_paragraph:
          'ฟังก์ชันแฮชคือฟังก์ชันใด ๆ ที่สามารถใช้แมปข้อมูลขนาดใดก็ได้ให้เป็นค่าขนาดคงที่ ค่าที่ส่งคืนโดยฟังก์ชันแฮชเรียกว่าค่าแฮช รหัสแฮช ดิจิท หรือเพียงแค่แฮช ค่ามักจะใช้ในการจัดทำดัชนีตารางขนาดคงที่ที่เรียกว่าตารางแฮช การใช้ฟังก์ชันแฮชในการจัดทำดัชนีตารางแฮชเรียกว่าการแฮชหรือการจัดเก็บแบบกระจาย',
        tip: 'แค่พิมพ์ต่อไป! เนื่องจากอัลกอริธึม SHA-256 อินพุตใหม่ใด ๆ จะส่งผลให้แฮชแบบสุ่มทั้งหมดแม้ว่าจะมีอินพุตที่คล้ายกันมากก็ตาม',
        spoiler: 'ลองอะไรที่มี 8 ตัวอักษร',
      },
      hashing_four: {
        power_of_random_heading: 'พลังของความสุ่ม',
        power_of_random_paragraph:
          "เหมือนกับสถานการณ์ที่สุ่มอย่างสมบูรณ์ ในแง่ของความน่าจะเป็น ฟังก์ชันแฮช SHA-256 จะสุ่มอย่างสมบูรณ์สำหรับการเพิ่มข้อมูลใหม่แต่ละครั้ง หากคุณแฮชนิยาย 'War and Peace' แล้วเพิ่มตัวอักษรเพียงตัวเดียวลงในข้อความต้นฉบับ มันจะส่งผลให้แฮชแตกต่างไปอย่างสิ้นเชิง ตัวอักษรใหม่แต่ละตัวจะเปลี่ยนแฮชในลักษณะที่สุ่มอย่างสมบูรณ์ เมื่อพิจารณาว่ามีอักขระที่เป็นไปได้ 16 ตัวในระบบเลขฐานสิบหก (0-9 และ a-f) คุณคิดว่ามีโอกาสมากน้อยเพียงใดที่จะพบแฮชที่ขึ้นต้นด้วย '0'?",
        tip: "คุณสามารถคำนวณได้หรือไม่? จากอักขระที่เป็นไปได้ 16 ตัวต่อหลัก คุณคิดว่าโอกาสที่จะพบแฮชที่ขึ้นต้นด้วย '00' เป็นอย่างไร? แล้ว '000' ล่ะ?",
        spoiler: "ลองอะไรที่ขึ้นต้นด้วยตัวอักษร 's'",
      },
      hashing_six: {
        collision_resistance_heading: 'SHA256 และการต้านทานการชนกัน',
        collision_resistance_paragraph:
          'SHA-256 ส่งคืนค่าแฮช 256 บิต (64 ตัวอักษร) ซึ่งเป็นการแสดงผลที่ไม่ซ้ำกันของข้อมูลอินพุต มันเป็นส่วนหนึ่งของฟังก์ชันแฮชที่ใช้การสร้าง Merkle–Damgård ซึ่งเป็นวิธีการสร้างฟังก์ชันแฮชจากฟังก์ชันการบีบอัดที่ง่ายกว่า ในการสร้างนี้ ข้อความอินพุตจะถูกแบ่งออกเป็นบล็อกขนาดคงที่ และกลไกการเชื่อมโยงจะประมวลผลบล็อกเหล่านี้ซ้ำ ๆ โดยรวมผลลัพธ์ของแต่ละบล็อกกับผลลัพธ์ของบล็อกก่อนหน้า กระบวนการนี้จะดำเนินต่อไปจนกว่าข้อความทั้งหมดจะถูกประมวลผล ทำให้ได้ค่าแฮชสุดท้าย คุณสมบัติด้านความปลอดภัยที่แข็งแกร่งและการต้านทานการชนกันของ SHA-256 ทำให้มันเป็นรากฐานของความสมบูรณ์ของข้อมูลและการตรวจสอบความถูกต้องในวิทยาการเข้ารหัสลับสมัยใหม่',
        tip: 'ไม่มีเคล็ดลับจริง ๆ ในบทเรียนนี้ เมื่อคุณดำเนินการใน Saving Satoshi คุณจะพบว่าเราช่วยคุณน้อยลงเรื่อย ๆ และปล่อยให้คุณหาทางแก้ไขด้วยตัวเอง',
        spoiler:
          "เมื่อรู้ว่าตัวอักษรใหม่แต่ละตัวจะคำนวณแฮชแบบสุ่มทั้งหมด คุณสามารถเพิ่มตัวอักษรใหม่ต่อไปจนกว่าคุณจะเริ่มต้นด้วย '00' หรือมากกว่า... หรือลองใช้คำว่า trigonometry",
      },
      scripting_one: {
        hash_libraries_heading: 'ฟังก์ชันแฮช',
        hash_libraries_paragraph:
          'ไลบรารี crypto ใน Node.js และไลบรารี hashlib ใน Python เป็นไลบรารีโค้ดที่นำอัลกอริธึมที่เราจะใช้มาใช้เป็นเครื่องมือที่มีประโยชน์สำหรับนักพัฒนา ไลบรารีเหล่านี้ได้รับการตรวจสอบอย่างละเอียดเพื่อให้แน่ใจว่ามีความถูกต้องและปลอดภัย เนื่องจากหลายคนพึ่งพาไลบรารีเหล่านี้ในการรักษาความปลอดภัยของระบบที่มีค่าและสำคัญ',
        nonce_heading: 'นอนซ์',
        nonce_paragraph:
          'นอนซ์ (ย่อมาจาก number used once) คือตัวเลขสุ่มหรือกึ่งสุ่มที่ใช้ในกระบวนการเข้ารหัสและการคำนวณต่าง ๆ วัตถุประสงค์หลักของมันคือการเพิ่มความไม่แน่นอนและทำให้แน่ใจว่าการดำเนินการหรือการคำนวณเฉพาะไม่สามารถทำซ้ำหรือคาดเดาได้ง่าย นอนซ์มีความสำคัญต่อความปลอดภัยของการขุดบิตคอยน์ แต่เราจะเรียนรู้เพิ่มเติมเกี่ยวกับเรื่องนี้ในภายหลัง...',
        tip_one:
          'ตรวจสอบให้แน่ใจว่าคุณกำลังถอดรหัสอินพุตอย่างถูกต้อง อัลกอริธึมการแฮชมักจะส่งคืนวัตถุที่ถอดรหัสในไบต์ แต่เราต้องการอ่านในรูปแบบเลขฐานสิบหก!',
        tip_two:
          'คิดเกี่ยวกับวิธีที่คุณจะสร้างฟังก์ชันเพื่อให้ทำงานต่อไปจนกว่าคำตอบนั้นจะเท่ากับค่าที่เฉพาะเจาะจง',
        tip_three:
          'อย่าลืมบันทึกคำตอบของคุณด้วย <span className="p-1 font-mono bg-[#0000004D] m-1">console.log()</span> หรือ <span className="p-1 font-mono bg-[#0000004D] m-1">print()</span> นี่เป็นวิธีเดียวที่ IDE ของเราจะพยายามตรวจสอบคำตอบของคุณ',
      },
      mining_one: {
        mining_heading: 'การขุด',
        mining_paragraph:
          'การขุดคือที่ที่แนวคิดเหล่านี้ทั้งหมดมารวมกัน การขุดบิตคอยน์เป็นกระบวนการที่สร้างบิตคอยน์ใหม่และเพิ่มธุรกรรมลงในบล็อกเชน นักขุดแข่งขันกันเพื่อแก้ปริศนาทางคณิตศาสตร์ที่ซับซ้อนโดยการหานอนซ์ที่ไม่ซ้ำกันและถูกต้องในแต่ละบล็อกของธุรกรรม กระบวนการพิสูจน์การทำงานนี้ต้องการพลังการคำนวณและพลังงานอย่างมาก ทำให้เป็นวิธีที่ปลอดภัยและกระจายอำนาจในการตรวจสอบธุรกรรม นักขุดที่ประสบความสำเร็จจะได้รับรางวัลเป็นบิตคอยน์ที่สร้างขึ้นใหม่และค่าธรรมเนียมการทำธุรกรรม และพวกเขามีบทบาทสำคัญในการรักษาความสมบูรณ์ของเครือข่ายบิตคอยน์',
        difficulty_heading: 'ความยาก',
        difficulty_paragraph:
          'ความยากในการขุดคือสิ่งที่ทำให้บล็อกยังคงอยู่ที่ค่าเฉลี่ย 10 นาทีระหว่างแต่ละบล็อกใหม่',
        spoiler:
          'ไม่มีอะไรจะสปอยล์! แค่อ่านบทเรียนนี้ต่อไป จะมีโอกาสมากขึ้นในการแสดงความรู้เกี่ยวกับการขุดของคุณในบทเรียนต่อ ๆ ไป!',
      },
    },
  },
  chapter_three: {
    title: 'การโจมตี 51%',
    paragraph_one:
      'คุณป้อนที่อยู่ของบล็อกเอ็กซ์พลอเรอร์และเห็นว่าบล็อกกลับมาเป็นช่วงเวลาสิบนาทีอีกครั้ง อย่างไรก็ตาม Holocat กลับนอนหลับผ่านเสียงรบกวนจาก ASIC ทั้งหมด',
    paragraph_two: 'แมว. คุณจะทำอะไรได้?',
    paragraph_three:
      'อย่างไรก็ตาม มีบางอย่างผิดปกติ บล็อกว่างเปล่าและธุรกรรมไม่ได้รับการประมวลผล คุณทำผิดพลาดหรือไม่? นี่อาจเป็นเรื่องบังเอิญหรือไม่? ข้อความอีกข้อความหนึ่งปรากฏขึ้นบนหน้าจอคอมพิวเตอร์ ปลุก Holocat',
    paragraph_four: 'มันไม่ใช่เรื่องบังเอิญ',

    intro_one: {
      title: 'บทนำ',
      nav_title: 'การแฮช',
      paragraph_one:
        '—ซาโตชิ นากาโมโตะ: “เฮ้ คุณ! ใช่ คุณ! จำฉันได้ไหม? บิตคอยน์กำลังถูกโจมตีด้วยการโจมตี 51%! แวนเดอร์พูลใช้ช่องโหว่ในเฟิร์มแวร์ ASIC มาตรฐานเพื่อบิดเบือนพูลการขุดที่มีอยู่ให้เป็นไปตามเป้าหมายของเขา เขาใช้พวกมันในการขุดบล็อกว่างเปล่าเพื่อจับระบบนิเวศของบิตคอยน์เป็นตัวประกันและบังคับให้ผู้คนสนับสนุนการเพิ่มปริมาณบิตคอยน์ ทำอะไรสักอย่างสิ เจ้าบ้า!”',
      paragraph_two:
        'คอมพิวเตอร์เก่าพ่นฝุ่นออกมา จากนั้นสร้างข้อมูลที่เรียกว่า “สเปรดชีต” ซึ่งมีข้อมูลติดต่อของผู้ดำเนินการพูลบิตคอยน์รายใหญ่ที่สุด รวมถึงแพตช์สำหรับไวรัสที่ทำให้ BitRey ควบคุมนักขุด ส่งไฟล์ไปยังผู้ดำเนินการพูลเพื่อให้พวกเขาสามารถควบคุมเครื่องของพวกเขาและต่อสู้กับ BitRey ได้',
      paragraph_three:
        '—HOLOCAT: “เรามีงานต้องทำมากขึ้น เอาล่ะ คุณทำ ฉันจะวิ่งผ่านกำแพงและทำให้หนูกลัว”',
    },

    solo_one: {
      title: 'คุณ vs. Bitrey',
      nav_title: 'การขุดคนเดียว',
      step_zero_heading: 'ลองดูกันเถอะ',
      step_zero_paragraph_one:
        'ในขณะที่คุณกำลังรอผู้ดำเนินการพูลที่คุณติดต่อไป คุณตัดสินใจดูว่า BitRey สามารถถูกขับไล่ได้ด้วยตัวคนเดียวหรือไม่ นี่คือวิธีที่อัตราแฮชของคุณซ้อนกัน คุณคิดว่าสิ่งนี้จะเป็นอย่างไร?',
      step_one_heading: 'เราเริ่มการแข่งขันแล้ว',
      step_one_paragraph_one:
        'ตอนนี้เรากำลังขุด 100 บล็อกเพื่อดูว่าคุณซ้อนกันกับ BitRey ได้กี่บล็อก',
      step_two_heading: 'นั่นไม่ดีเลย!',
      step_two_paragraph_one:
        'โอ้โห เราไม่มีพลังแฮชเพียงพอที่จะแข่งขันกับ BitRey และพูลที่ควบคุมด้วยไวรัส ลองดูว่าเราสามารถเอาชนะ BitRey ได้ใน 100 บล็อกถัดไปกับผู้ดำเนินการพูลคนอื่น ๆ หรือไม่ บิตคอยน์ดำเนินการมากว่าศตวรรษแล้วและจะไม่ยอมแพ้โดยไม่มีการต่อสู้',
    },

    pool_one: {
      title: 'พูล vs. BitRey',
      nav_title: 'หามิตรสหาย',
      waiting_screen_heading: 'เราต้องการการสนับสนุน!',
      waiting_screen_paragraph_one: `นักขุดของคุณในโกดังไม่มีโอกาสเลย หากคุณรวมพลังแฮชของคุณกับนักขุดคนอื่น ๆ คุณอาจสามารถยืนหยัดต่อสู้กับการโจมตีของ BitRey ได้`,
      waiting_screen_paragraph_two:
        'รอจนกว่าคนอื่น ๆ จะเข้าร่วมกับคุณเพื่อที่เราจะได้รวมพลังกัน',
      waiting_button: 'กำลังรอ...',
      continue_button: 'ไปกันเถอะ',
    },

    pool_two: {
      title: 'พูล vs. BitRey',
      nav_title: 'การขุดร่วมกัน',
      step_zero_heading: 'เริ่มกันเลย',
      step_zero_paragraph_one:
        'โดยการรวมอัตราแฮชของคุณกับผู้ดำเนินการพูลคนอื่น ๆ คุณสามารถยืนหยัดต่อสู้กับ BitRey ได้หรือไม่?',
      step_two_heading: 'พ่ายแพ้อีกครั้ง!',
      step_two_paragraph_one:
        'มีบางอย่างผิดปกติ มีเพียง Hash Hoppers เท่านั้นที่พบบล็อก คุณคิดว่าเป็นเพราะอะไร?',
    },

    coop_one: {
      title: 'Coop vs. BitRey',
      nav_title: 'มีบางอย่างผิดพลาด',
      heading: 'มีบางอย่างยังไม่ถูกต้อง',
      paragraph_one:
        'Hash Hoppers ซึ่งมีพลังแฮชมากที่สุด กำลังหาบล็อกทั้งหมดของคุณ แต่คนอื่น ๆ ไม่พบอะไรเลย',
      paragraph_two:
        'ปัญหาคือทุกคนกำลังตรวจสอบนอนซ์เดียวกันในขณะที่พวกเขากำลังขุด คุณจะประสานงานได้ดีขึ้นอย่างไร?',
      paragraph_three:
        'คุณตัดสินใจใส่ตัวระบุเฉพาะใน “extraNonce” เมื่อเตรียมข้อมูลบล็อกสำหรับแต่ละคนเพื่อป้องกันความพยายามที่ซ้ำซ้อน',
    },

    coop_two: {
      title: 'Coop vs. BitRey',
      nav_title: 'extraNonce',
      heading: 'extraNonce คืออะไร?',
      paragraph_one:
        'สำหรับโปรโตคอลพูลการขุด Stratum (ไม่ใช่โปรโตคอลบิตคอยน์) การทำธุรกรรม coinbase ยังมีสิ่งที่เรียกว่า “extra nonce” เมื่อให้ข้อมูลบล็อกแก่นักขุด พูลการขุดจะแบ่ง extra nonce ออกเป็นสองส่วน: “extranonce1” และ “extranonce2”',
      paragraph_two: 'การแบ่ง extra nonce ออกเป็นสองส่วนมีข้อดีหลายประการ:',
      list_one: 'มันป้องกันไม่ให้ผู้เข้าร่วมพูลทำงานเดียวกัน',
      list_two:
        'มันช่วยให้พูลสามารถส่งรายการธุรกรรมเดียวกันไปยังนักขุดทั้งหมดที่รวมกัน นั่นหมายความว่านักขุดเพียงแค่ต้องอัปเดต “extranonce2” และไม่ต้องเปลี่ยนธุรกรรมที่รวมอยู่ในบล็อก',
      list_three:
        '“extranonce1” ช่วยให้พูลสามารถระบุและกำหนดส่วนแบ่งการมีส่วนร่วมได้เนื่องจากนักขุดแต่ละคนจะได้รับ “extranonce1” ของตนเอง',
      paragraph_three:
        'นักขุดที่มีส่วนร่วมในพูลจะอัปเดต “extranonce2” และวนผ่าน nonce ในส่วนหัวของบล็อก หากพวกเขาไม่พบวิธีแก้ปัญหา พวกเขาจะทำซ้ำกระบวนการด้วย “extranonce2” ที่แตกต่างกันจนกว่าจะพบ',
      paragraph_four: 'ลองแบ่งงานอีกครั้งโดยใช้วิธีนี้',
    },

    coop_three: {
      title: 'Coop vs. BitRey',
      nav_title: 'การขุดด้วยทีมเวิร์ค',
      step_zero_heading: 'อีกครั้งหนึ่ง...',
      step_zero_paragraph_one:
        'ลองดูว่าเรามีโอกาสต่อสู้กับ BitRey ได้หรือไม่ด้วยกลยุทธ์ที่ปรับปรุงใหม่ของการแบ่งพื้นที่นอนซ์',
      step_two_heading: 'คุณทำได้!',
      step_two_paragraph_one:
        'ร่วมกันคุณและผู้ดำเนินการพูลคนอื่น ๆ ยับยั้งความพยายามของ BitRey ที่จะเข้ายึดเครือข่าย',
    },

    split_one: {
      title: 'การแบ่งรางวัล',
      nav_title: 'การแบ่งส่วนที่ยุติธรรม',
      heading: 'ทำได้ดีมาก',
      paragraph_one:
        'ไม่เพียงแต่คุณปกป้องเครือข่ายจาก BitRey ได้เท่านั้น แต่คุณยังได้รับบิตคอยน์เป็นรางวัลด้วย!',
      paragraph_two:
        'สำหรับทุกบล็อกที่ขุดได้ นักขุดจะได้รับรางวัลเป็นบิตคอยน์ หากมีมากกว่าหนึ่งคนทำงานในบล็อกนั้น กลุ่มนักขุด (พูลการขุด) จะได้รับรางวัลเพื่อแบ่งปันกัน',
      paragraph_three: 'รางวัลนี้ประกอบด้วยสองสิ่ง:',
      list_one: 'ค่าธรรมเนียมสำหรับธุรกรรมทั้งหมดในบล็อก',
      list_two: 'เงินอุดหนุนบล็อก',
      paragraph_four:
        'คุณและเพื่อนนักขุดของคุณได้รับบิตคอยน์รวม 6.1 บิตคอยน์และกำลังมองหาวิธีที่ดีในการแบ่งมัน ควรแบ่งตามปริมาณงานที่แต่ละคนทำ',
      paragraph_five:
        'พูลการขุดแก้ปัญหานี้โดยการติดตามจำนวนวิธีแก้ปัญหาบางส่วนที่นักขุดแต่ละคนสร้างขึ้น พูลจะกำหนดความยากขั้นต่ำให้กับนักขุดแต่ละคน (ต่ำกว่าความยากของบล็อก) ตามพลังแฮชของพวกเขา ทุก ๆ สองสามวินาที นักขุดจะพบวิธีแก้ปัญหาที่ง่ายกว่าเหล่านั้นและแจ้งให้พูลทราบ จากนั้นพูลจะติดตามหุ้นที่ส่งทั้งหมดและแบ่งรางวัลบล็อกตามนั้น',
      paragraph_six: 'ลองดูสิ่งนี้ในการดำเนินการ',
    },

    split_two: {
      title: 'การแบ่งรางวัล',
      nav_title: 'การคำนวณรางวัล',
      step_zero_heading: 'มาทบทวนความพยายามของทุกคนกัน',
      step_zero_paragraph:
        'เราจะทำการต่อสู้อีกครั้ง คราวนี้เราจะมุ่งเน้นไปที่พูลของเรา โดยเฉพาะจำนวนวิธีแก้ปัญหาบางส่วนที่นักขุดแต่ละคนพบ',
      step_two_heading: 'มาคำนวณกันเถอะ',
      step_two_paragraph:
        'ดูตัวเลขข้างต้นและดูว่าคุณสามารถหาวิธีที่ยุติธรรมในการแบ่งรางวัลได้หรือไม่ คิดออกแล้วใช่ไหม? มาทบทวนกันทีละขั้นตอน',
      step_three_heading: 'เปอร์เซ็นต์อัตราแฮช',
      step_three_paragraph:
        'อย่างที่คุณทราบ นี่แสดงถึงปริมาณงานที่นักขุดแต่ละคนมีส่วนร่วมในการหาบล็อก แต่พูลการขุดไม่มีทางรู้หรือวัดตัวเลขนี้ได้ เนื่องจากนักขุดจะส่งต่อเฉพาะวิธีแก้ปัญหาที่ประสบความสำเร็จเท่านั้น',
      step_four_heading: 'เปอร์เซ็นต์บล็อกที่พบ',
      step_four_paragraph:
        'โอกาสในการหาบล็อกมีน้อยมากเนื่องจากเกี่ยวข้องกับโชคมาก โดยเฉพาะในสถานการณ์ที่มีนักขุดที่ทรงพลังมาก นักขุดที่มีขนาดเล็กมากอาจมีส่วนร่วมในการทำงานแต่ไม่เคยหาบล็อกได้เลย',
      step_five_heading: 'เปอร์เซ็นต์วิธีแก้ปัญหาบางส่วน',
      step_five_paragraph:
        'ตอนนี้ตัวเลขนี้จะใช้ได้ นักขุดรายงานวิธีแก้ปัญหาเหล่านี้ให้กับปัญหาที่ง่ายกว่าเป็นประจำกับพูล สิ่งนี้ช่วยให้พูลสามารถวัดได้อย่างแม่นยำว่ามีงานมากน้อยเพียงใดที่นักขุดแต่ละคนได้ให้ไว้',
      step_six_heading: 'การแบ่งรางวัล',
      step_six_paragraph:
        'ตอนนี้เราสามารถนำรางวัล 6.1 บิตคอยน์และแบ่งตามเปอร์เซ็นต์ของวิธีแก้ปัญหาบางส่วนของแต่ละพูลได้ ยินดีด้วย!',
    },

    outro_one: {
      title: 'บทส่งท้าย',
      nav_title: 'บทเสร็จสมบูรณ์',
      heading: 'เอานั่นไป, Vanderpoole!',
      paragraph_one:
        'ทำได้ดีมาก! คุณและผู้ดำเนินการคนอื่น ๆ สามารถขับไล่การโจมตี 51% ของ Vanderpoole ได้โดยการรวมทรัพยากรของคุณ บล็อกว่างเปล่าไม่ได้ถูกส่งอีกต่อไปและดูเหมือนว่าเขาจะยอมแพ้แล้ว',
      paragraph_two:
        'ถึงเวลาที่จะเก็บเกี่ยวรางวัลของคุณ! ไปที่บทถัดไปเพื่อถอนบิตคอยน์ของคุณ',
    },
    resources: {
      solo: {
        hashrate_heading: 'อัตราแฮชการขุด',
        hashrate_paragraph:
          'อัตราแฮชของนักขุดแต่ละคนหมายถึงพลังการคำนวณที่พวกเขามีส่วนร่วมในกระบวนการขุดของเครือข่ายบิตคอยน์ มันคืออัตราที่ฮาร์ดแวร์การขุดของพวกเขาสามารถทำการคำนวณทางคณิตศาสตร์ที่จำเป็นเพื่อพยายามขุดบล็อกใหม่ อัตราแฮชของนักขุดแต่ละคนมักจะวัดเป็นแฮชต่อวินาที หรือในระดับที่ใหญ่ขึ้นเป็นเทราแฮช หนึ่งล้านล้านแฮชต่อวินาที (TH/s) ขึ้นอยู่กับขนาดของการดำเนินการขุดและความสามารถของฮาร์ดแวร์การขุดของพวกเขา',
      },
      pool: {
        pool_heading: 'พูลการขุด',
        pool_paragraph:
          'พูลการขุดมีบทบาทสำคัญในการขุดสกุลเงินดิจิทัล โดยให้ประโยชน์หลายประการแก่นักขุดแต่ละคน ด้วยการรวมพลังการคำนวณและทรัพยากรของผู้เข้าร่วมหลายคน พูลการขุดจะเพิ่มโอกาสในการขุดบล็อกใหม่ให้สำเร็จ ส่งผลให้มีรายได้ที่คาดการณ์ได้และสม่ำเสมอมากขึ้น นอกจากนี้ยังเป็นแพลตฟอร์มให้นักขุดเข้าถึงอุปกรณ์การขุดขั้นสูงและการสนับสนุนจากผู้เชี่ยวชาญ ลดอุปสรรคในการเข้าถึงและทำให้สนามแข่งขันเท่าเทียมกัน ยิ่งไปกว่านั้น พูลการขุดช่วยกระจายรางวัลอย่างมีประสิทธิภาพ ทำให้นักขุดได้รับส่วนแบ่งที่ยุติธรรมสำหรับการมีส่วนร่วมของพวกเขา ทำให้การขุดสกุลเงินดิจิทัลสามารถเข้าถึงได้ มีเสถียรภาพ และให้ผลตอบแทนทางการเงินสำหรับชุมชนผู้เข้าร่วมที่กว้างขึ้น',
      },
      coop: {
        distribution_heading: 'การกระจายงาน',
        distribution_paragraph:
          "พูลการขุดใช้มาตรการป้องกันเพื่อให้แน่ใจว่าผู้เข้าร่วมของพวกเขาจะไม่ขุดนอนซ์เดียวกันสำหรับบล็อกเดียวกัน สิ่งนี้มีความสำคัญเนื่องจากในกระบวนการขุดบิตคอยน์ นักขุดแข่งขันกันเพื่อหานอนซ์ที่ส่งผลให้บล็อกถูกต้อง หากนักขุดสองคนในพูลเดียวกันทำงานกับนอนซ์เดียวกันพร้อมกัน จะไม่มีประสิทธิภาพและมีเพียงคนเดียวเท่านั้นที่จะได้รับรางวัลบล็อก เพื่อป้องกันสิ่งนี้ พูลการขุดใช้กระบวนการที่เรียกว่า 'การมอบหมายงาน' หรือ 'การกระจายงาน' เพื่อจัดสรรงานอย่างมีประสิทธิภาพ พูลการขุดจะแจกจ่ายงานให้นักขุดหรือผู้เข้าร่วมแต่ละคน เมื่อจำเป็นต้องขุดบล็อกใหม่ เซิร์ฟเวอร์ของพูล (หรือผู้ดำเนินการพูล) จะสร้าง 'งาน' ที่ไม่ซ้ำกันสำหรับนักขุด งานนี้รวมถึงข้อมูลทั้งหมดที่จำเป็นในการขุดบล็อก เช่น รายการธุรกรรมที่ยังไม่ได้ยืนยันในปัจจุบัน ส่วนหัวของบล็อกก่อนหน้า และความยากเป้าหมาย",
        shares_heading: 'การส่งหุ้น',
        shares_paragraph:
          "นักขุดทำงานกับงานที่ได้รับมอบหมายเหล่านี้และพยายามหานอนซ์ที่ถูกต้องอย่างต่อเนื่อง เมื่อมีนักขุดเชื่อว่าพวกเขามีวิธีแก้ปัญหา พวกเขาจะส่งสิ่งที่เรียกว่า 'หุ้น' ไปยังเซิร์ฟเวอร์ของพูล หุ้นนี้แสดงให้เห็นว่านักขุดกำลังทำงานเพื่อแก้ปัญหา หุ้นหาง่ายกว่าวิธีแก้ปัญหาจริงมาก แต่พวกมันทำหน้าที่เป็นหลักฐานของความพยายามของนักขุด",
      },
      split: {
        payout_heading: 'แผนการจ่ายเงิน',
        payout_subheading:
          'พูลการขุดสามารถเลือกแจกจ่ายรางวัลบล็อกได้หลายวิธีที่แตกต่างกันในบางวิธีที่สำคัญ:',
        pps_heading: 'จ่ายต่อหุ้น (PPS)',
        pps_paragraph:
          'ใน PPS นักขุดจะได้รับการจ่ายเงินคงที่สำหรับแต่ละหุ้นที่ถูกต้องที่พวกเขาส่ง ไม่ว่าพูลจะขุดบล็อกสำเร็จหรือไม่ก็ตาม ระบบนี้ให้นักขุดมีรายได้ที่มั่นคงและคาดการณ์ได้ ทำให้เป็นตัวเลือกที่ต้องการสำหรับผู้ที่ให้ความสำคัญกับความสม่ำเสมอในรายได้ของพวกเขา PPS ลดความแปรปรวนในรางวัล เนื่องจากนักขุดจะได้รับค่าตอบแทนสำหรับงานของพวกเขาตามหุ้นที่ส่ง ทำให้เป็นแหล่งรายได้ที่เชื่อถือได้ในโลกของการขุดสกุลเงินดิจิทัลที่มีความผันผวน อย่างไรก็ตาม PPS อาจหักค่าธรรมเนียมจากรายได้ของนักขุดหากพูลไม่สามารถขุดบล็อกได้สำเร็จ ค่าธรรมเนียมนี้มีไว้เพื่อครอบคลุมค่าใช้จ่ายในการดำเนินงานและลดความเสี่ยงสำหรับผู้ดำเนินการพูลในกรณีที่ไม่มีการขุดบล็อกภายในระยะเวลาที่กำหนด ใน PPS แบบดั้งเดิม นักขุดจะได้รับการจ่ายเงินลดลงเมื่อพูลเผชิญกับความยากลำบาก',
        pplns_heading: 'จ่ายต่อหุ้นสุดท้าย N (PPLNS)',
        pplns_paragraph:
          'PPLNS พิจารณาการมีส่วนร่วมของนักขุดในช่วงเวลาที่กำหนดของหุ้นสุดท้าย N นักขุดจะได้รับค่าตอบแทนตามจำนวนและความยากของหุ้นที่พวกเขาส่งภายในช่วงเวลานั้น PPLNS กระตุ้นให้นักขุดมีส่วนร่วมอย่างต่อเนื่องในพูล เนื่องจากมันให้รางวัลสำหรับการมีส่วนร่วมอย่างสม่ำเสมอและช่วยลดความเสี่ยงของกลยุทธ์การกระโดดพูล นักขุดจะได้รับการจ่ายเงินเมื่อพูลขุดบล็อกสำเร็จ และรางวัลจะถูกแจกจ่ายตามสัดส่วนของการมีส่วนร่วมล่าสุดของพวกเขา ทำให้เป็นวิธีการที่ยุติธรรมและขับเคลื่อนด้วยประสิทธิภาพในการหารายได้ในระบบนิเวศการขุด',
        pps_plus_heading: 'จ่ายต่อหุ้น + (PPS+)',
        pps_plus_paragraph:
          'PPS+ เสนอนักขุดการจ่ายเงินคงที่สำหรับแต่ละหุ้นที่พวกเขามีส่วนร่วมในความพยายามในการขุดของพูล อย่างไรก็ตาม PPS+ มักจะรวมโบนัสหรือพรีเมียมเพิ่มเติมเป็นแรงจูงใจให้นักขุดที่มีส่วนร่วมในความเสถียรและความน่าเชื่อถือของพูล โบนัสนี้ออกแบบมาเพื่อกระตุ้นให้นักขุดมีส่วนร่วมอย่างต่อเนื่องในพูลและส่งเสริมการมีส่วนร่วมในระยะยาว PPS+ ให้นักขุดมีรายได้ที่สม่ำเสมอและคาดการณ์ได้ ในขณะที่โบนัสเพิ่มเติมทำให้เป็นตัวเลือกที่น่าสนใจสำหรับผู้ที่ต้องการความน่าเชื่อถือและรางวัลเพิ่มเติมในโลกของการขุดสกุลเงินดิจิทัล',
        fpps_heading: 'จ่ายเต็มต่อหุ้น (FPPS)',
        fpps_paragraph:
          'ใน Full PPS นักขุดจะได้รับการจ่ายเงินคงที่สำหรับทุกหุ้นที่พวกเขาส่งไปยังพูล โดยไม่คำนึงว่าพูลจะขุดบล็อกสำเร็จหรือไม่ วิธีการนี้ให้นักขุดมีรายได้ที่มั่นคงและคาดการณ์ได้ ทำให้เป็นตัวเลือกที่น่าสนใจสำหรับผู้ที่ให้ความสำคัญกับความน่าเชื่อถือในรายได้ของพวกเขา แตกต่างจาก PPS แบบดั้งเดิม Full PPS ทำให้นักขุดได้รับการจ่ายเงินเต็มจำนวนสำหรับงานที่พวกเขามีส่วนร่วม โดยไม่มีการหักใด ๆ แม้ว่าพูลจะเผชิญกับความยากลำบากเป็นครั้งคราวก็ตาม มันเป็นวิธีที่มั่นคงและตรงไปตรงมาที่ดึงดูดนักขุดที่ต้องการรายได้ที่สม่ำเสมอในโลกของการขุดสกุลเงินดิจิทัล',
      },
    },
  },

  chapter_four: {
    title: 'การเรียกร้องบิตคอยน์ 1.61 ของคุณ',
    paragraph_one:
      'เฮ้อ เกือบไปแล้ว! คุณกำลังสั่นจากการต่อสู้กับ BitRey แต่คุณก็โล่งใจที่คุณชนะ',
    paragraph_two:
      'ขณะที่คุณนั่งที่โต๊ะ คุณสูดหายใจลึก ๆ แล้วหลับตาและทบทวนเหตุการณ์ในวันนี้ในหัวของคุณ',

    intro_one: {
      title: 'บทนำ',
      nav_title: 'การรักษาความปลอดภัย',
      paragraph_one:
        '—HOLOCAT: “พวกเราคนหนึ่งควรนอน คุณต้องเริ่มติดต่อพูลการขุด พวกเขาจะต้องการรู้มากกว่าที่โลกจะรู้”',
      paragraph_two:
        'ขณะที่คุณนั่งที่โต๊ะ ButtLift Hover คุณทบทวนเหตุการณ์ในวันนี้ Vanderpoole BitRey การเปิดเผยว่านักขุดไม่เคยตกลงที่จะปิดตัวลงเพื่อประท้วง ทั้งหมดนี้เป็นความจริงหรือไม่? ทั้งหมดนี้ถูกจัดฉากหรือไม่? และคุณต้องดูแลแมวตัวนี้อีกนานแค่ไหน? (ในระยะไกล มีเสียงแมวร้อง)',
      paragraph_three:
        'ไม่ว่าจะเกิดอะไรขึ้นต่อไป คุณจะต้องใช้เงิน เดี๋ยวก่อน! คุณไม่เคยเรียกร้องรางวัลการขุดจากการแข่งขันกับ BitRey! คุณตัดสินใจถอนพวกมัน',
    },

    public_key_one: {
      title: 'กุญแจสาธารณะ',
      nav_title: 'คู่กุญแจ',
      heading: 'เกี่ยวกับคู่กุญแจ',
      paragraph_one:
        'ตามที่พูลการขุดระบุ ดูเหมือนว่าคุณมีบิตคอยน์ 1.61 ที่จะเรียกร้องจากงานทั้งหมดที่คุณทำก่อนหน้านี้',
      list_one: 'กุญแจส่วนตัว',
      list_two: 'กุญแจสาธารณะ',
      paragraph_two:
        'แต่เดี๋ยวก่อน คุณยังไม่มีวอลเล็ต! คุณอาจสงสัยว่าจะซื้อได้ที่ไหน ในขณะที่คุณสามารถซื้อฮาร์ดแวร์เพื่อสร้างวอลเล็ตบางประเภทได้ คุณสามารถสร้างวอลเล็ตด้วยคอมพิวเตอร์หรืออุปกรณ์มือถือของคุณได้ ลองทำกันเถอะ!',
      paragraph_three:
        'หากคุณสมัครบัญชีในช่วงใดช่วงหนึ่ง คุณจะได้รับสิ่งที่เรียกว่ารหัสส่วนตัว ในการเข้ารหัสลับ สิ่งนี้เรียกว่า “กุญแจส่วนตัว” และมักจะเป็นส่วนหนึ่งของคู่กุญแจ:',
      paragraph_four:
        'คู่กุญแจเดียวคือสิ่งที่จำเป็นในการสร้างวอลเล็ตและควบคุมเงินภายใน เมื่อคุณต้องการใช้จ่ายบิตคอยน์ คุณใช้กุญแจส่วนตัว เมื่อคุณต้องการรับบิตคอยน์ คุณใช้กุญแจสาธารณะ',
    },

    public_key_two: {
      title: 'กุญแจสาธารณะ',
      nav_title: 'การเข้ารหัสลับเส้นโค้งวงรี',
      paragraph_one:
        'ดังนั้น เรามีกุญแจส่วนตัว มันคือรหัสส่วนตัวที่คุณได้รับเมื่อคุณสมัคร เราจะสร้างกุญแจสาธารณะจากมันได้อย่างไร?',
      paragraph_two:
        'ในการทำเช่นนั้น เราจำเป็นต้องดูสาขาที่น่าสนใจของการเข้ารหัสลับที่เรียกว่าเส้นโค้งวงรี สิ่งนี้เรียกว่าการเข้ารหัสลับเส้นโค้งวงรี หรือย่อว่า ECC',
      paragraph_three:
        'ECC เกี่ยวข้องกับการใช้จุดบางจุดบนเส้นโค้งวงรีและทำการบวกและคูณบนจุดเหล่านั้น',
      paragraph_four:
        'บิตคอยน์ใช้เส้นโค้งเฉพาะที่เรียกว่า secp256k1 ในภาพ คุณจะเห็นเวอร์ชันที่ง่ายขึ้นซึ่งมองเห็นได้ง่ายขึ้น แต่ปฏิบัติตามกฎทางคณิตศาสตร์เดียวกัน',
      paragraph_five: 'เราเริ่มต้นด้วยจุดเฉพาะบนเส้นโค้งนี้ที่เรียกว่า',
      tooltip_one: {
        highlighted: 'จุดกำเนิด',
        question: 'จุดกำเนิดคืออะไร?',
        link: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=What%2520is%2520the%2520Generator%2520point%253F',
      },
    },

    public_key_three: {
      title: 'กุญแจสาธารณะ',
      nav_title: 'คำนวณกุญแจสาธารณะ',
      paragraph_one:
        'ในการสร้างกุญแจสาธารณะจากกุญแจส่วนตัว เราทำการดำเนินการเส้นโค้งวงรีซ้ำ ๆ กับจุดกำเนิด จุดกำเนิดเป็นจุดเฉพาะบนเส้นโค้ง ค่าของมันเป็นส่วนหนึ่งของมาตรฐาน secp256k1 และมันจะเหมือนเดิมเสมอ:',
      paragraph_two:
        'การดำเนินการทางคณิตศาสตร์บนเส้นโค้งวงรีคล้ายกับการบวก ดังนั้น การทำซ้ำการดำเนินการเหล่านั้นจึงคล้ายกับการคูณ เราใช้สัญลักษณ์ * เพื่ออธิบายอัลกอริธึม โดยที่ `k` คือกุญแจส่วนตัวและ `P` คือกุญแจสาธารณะที่สอดคล้องกัน:',
      python: {
        paragraph_three:
          'ทำฟังก์ชัน <span className="text-green">privatekey_to_publickey()</span> ให้สมบูรณ์ ซึ่งรับกุญแจส่วนตัวเป็นสตริงที่เข้ารหัสเป็นเลขฐานสิบหกและส่งคืนกุญแจสาธารณะที่สอดคล้องกันเป็นวัตถุ GE (Group Element)',
      },
      javascript: {
        paragraph_three:
          'ทำฟังก์ชัน <span className="text-green">privateKeyToPublicKey()</span> ให้สมบูรณ์ ซึ่งรับกุญแจส่วนตัวเป็นสตริงที่เข้ารหัสเป็นเลขฐานสิบหกและส่งคืนกุญแจสาธารณะที่สอดคล้องกันเป็นวัตถุ GE (Group Element)',
      },
      paragraph_four: 'นี่คือคำแนะนำการแปลงประเภทเพื่อเริ่มต้น:',
      success: 'ทำได้ดี! กุญแจสาธารณะนั้นค่อนข้างยาว ลองบีบอัดมันกันเถอะ!',
    },

    public_key_four: {
      title: 'กุญแจสาธารณะ',
      nav_title: 'บีบอัดกุญแจสาธารณะ',
      paragraph_one:
        'กุญแจสาธารณะมีพิกัด x และ y รวมเป็น 64 ไบต์ สิ่งนี้สามารถบีบอัดเป็น 33 ไบต์โดยการลบพิกัด y และเพิ่มไบต์เมตาดาต้าเดียว ไบต์นั้นจะระบุว่าพิกัด Y เป็นเลขคู่หรือคี่ เนื่องจากสมการเส้นโค้งวงรีมีเพียงสองตัวแปร กุญแจสาธารณะที่สมบูรณ์สามารถคำนวณได้ในภายหลังโดยผู้ตรวจสอบโดยใช้เพียง x และเมตาดาต้า:',
      paragraph_two_javascript:
        'ไบต์เมตาดาต้าควรเป็น `2` หาก y เป็นเลขคู่และ `3` หาก y เป็นเลขคี่ ทำฟังก์ชัน <span className="text-green">compressPublicKey()</span> ให้สมบูรณ์เพื่อรับกุญแจสาธารณะและส่งคืนสตริงเลขฐานสิบหก 33 ไบต์ที่แสดงถึงกุญแจสาธารณะที่บีบอัด',
      paragraph_two_python:
        'ไบต์เมตาดาต้าควรเป็น `2` หาก y เป็นเลขคู่และ `3` หาก y เป็นเลขคี่ ทำฟังก์ชัน <span className="text-green">compress_publickey()</span> ให้สมบูรณ์เพื่อรับกุญแจสาธารณะและส่งคืนสตริงเลขฐานสิบหก 33 ไบต์ที่แสดงถึงกุญแจสาธารณะที่บีบอัด',
      success:
        'ยอดเยี่ยม ตอนนี้เรามีกุญแจสาธารณะที่บีบอัดแล้ว ต่อไปเราต้องแฮชมันและเข้ารหัสในรูปแบบที่เป็นมิตรกับมนุษย์',
    },

    address_one: {
      title: 'ที่อยู่',
      nav_title: 'ถนนทางเดียว',
      heading: 'ทำได้ดี!',
      paragraph_one:
        'และนั่นคือสิ่งที่คุณมี! กุญแจสาธารณะที่บีบอัดของคุณ! มีหลายสิ่งที่น่าสนใจที่เราสามารถทำได้กับมัน รวมถึงการสร้างที่อยู่สำหรับวอลเล็ตของเรา เราจะเรียนรู้เกี่ยวกับสิ่งนั้นในความท้าทายถัดไป',
      paragraph_two:
        'โปรดทราบว่าการสร้างกุญแจสาธารณะเป็นถนนทางเดียว คุณไม่สามารถหากุญแจส่วนตัวที่ใช้ในการสร้างกุญแจสาธารณะได้ เว้นแต่คุณจะแก้ปัญหาทางคณิตศาสตร์ที่ยากมากที่เรียกว่า ',
      tooltip_one: {
        question: 'ปัญหาลอการิทึมไม่ต่อเนื่องเกี่ยวข้องกับบิตคอยน์อย่างไร?',
        link: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=how%2520is%2520the%2520discrete%2520log%2520problem%2520relevant%2520to%2520bitcoin%253F',
        highlighted: 'ปัญหาลอการิทึมไม่ต่อเนื่อง',
      },
    },

    address_two: {
      title: 'ที่อยู่',
      nav_title: 'แฮชกุญแจสาธารณะที่บีบอัด',
      paragraph_one:
        'คุณจำความท้าทายในการแฮชได้ไหม? ปรากฎว่าคุณสามารถสร้างที่อยู่บิตคอยน์ประเภทที่ง่ายที่สุดได้โดยการแฮชกุญแจสาธารณะที่บีบอัดของคุณ บิตคอยน์ใช้สองอัลกอริธึมการแฮชที่แตกต่างกันสำหรับสิ่งนี้: SHA-256 และ RIPEMD-160',
      paragraph_two: 'ขั้นตอน:',
      paragraph_three:
        '<span className="indent-48">1. ทำการแฮช SHA-256 บนกุญแจสาธารณะที่บีบอัดของคุณ</span>',
      paragraph_four:
        '<span className="indent-48">2. ทำการแฮช RIPEMD-160 บนผลลัพธ์ SHA-256 นั้น ผลลัพธ์สุดท้ายจะเป็น 20 ไบต์ที่เข้ารหัสเป็นสตริงเลขฐานสิบหก</span>',
      paragraph_five:
        'ทำฟังก์ชันให้สมบูรณ์ที่รับกุญแจสาธารณะที่บีบอัด 33 ไบต์เป็นสตริงเลขฐานสิบหกและส่งคืนแฮชกุญแจสาธารณะ 20 ไบต์เป็นสตริงเลขฐานสิบหก',
      paragraph_six:
        'นี่คือเอกสารสำหรับไลบรารีการแฮชที่เรานำเข้าให้คุณ:\n' +
        '<Link href="https://nodejs.org/api/crypto.html#class-hash" target="_blank" className="underline">JavaScript: crypto</Link>\n' +
        '<Link href="https://docs.python.org/3/library/hashlib.html#usage" target="_blank" className="underline">Python: hashlib</Link>',
      success: 'เยี่ยมมาก อีกขั้นตอนเดียวคุณก็จะมีที่อยู่วอลเล็ตของคุณแล้ว',
    },

    address_three: {
      title: 'ที่อยู่',
      nav_title: 'รับที่อยู่ P2WPKH',
      paragraph_one:
        'มีที่อยู่บิตคอยน์หลายประเภท ในแบบฝึกหัดก่อนหน้านี้ เราได้สร้างแฮชกุญแจสาธารณะที่บีบอัด 20 ไบต์ ตอนนี้เราต้องการเข้ารหัสแฮชนั้นเป็นที่อยู่ Pay-to-Witness-Public-Key-Hash (p2wpkh) บนเครือข่าย Testnet',
      paragraph_two:
        'ก่อนอื่นเราต้องเพิ่มหมายเลขเวอร์ชันพยาน `0` ลงในแฮช ผลลัพธ์ 21 ไบต์นี้เรียกว่า <span className="font-bold">โปรแกรมพยาน</span>',
      paragraph_three:
        'จากนั้นโปรแกรมพยานจะถูกเข้ารหัสในรูปแบบที่เป็นมิตรกับมนุษย์ที่เรียกว่า <Link href="https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#user-content-Specification" target="_blank" className="underline">bech32</Link> การทำเช่นนี้จะเพิ่มคำนำหน้าที่อ่านได้โดยมนุษย์และการตรวจสอบความถูกต้องลงในข้อมูล',
      paragraph_four: 'คำนำหน้าจะถูกกำหนดโดยเครือข่าย:',
      table_heading: {
        item_one: 'เครือข่าย',
        item_two: 'คำนำหน้าที่อ่านได้โดยมนุษย์',
      },
      table_rows: {
        key_one: 'Mainnet',
        value_one: 'bc',
        key_two: 'Testnet',
        value_two: 'tb',
        key_three: 'Regtest',
        value_three: 'bcrt',
      },
      paragraph_five:
        "เนื่องจากเรากำลังสร้างที่อยู่ Testnet เราจะใช้คำนำหน้า 'tb'",
      paragraph_six:
        'หลังจากที่ข้อมูลถูกเข้ารหัสเป็น bech32 เราจะได้ที่อยู่บิตคอยน์!',
      paragraph_seven:
        'ทำฟังก์ชันให้สมบูรณ์เพื่อสร้างที่อยู่ bech32 จากแฮชกุญแจสาธารณะที่บีบอัด เริ่มต้นด้วยการสร้างโปรแกรมพยาน จากนั้นแปลงโปรแกรมเป็นที่อยู่โดยใช้ไลบรารี bech32 ที่นำเข้าให้คุณแล้ว',
      paragraph_eight:
        'คุณอาจต้องค้นหาในไลบรารี bech32 และอ่านโค้ดเพื่อหาฟังก์ชันที่เหมาะสมในการใช้:\n',
      paragraph_eight_javascript:
        '<Link href="https://github.com/saving-satoshi/bech32js/blob/main/bech32.js" target="_blank" className="underline">JavaScript: @savingsatoshi/bech32js</Link>\n',
      paragraph_eight_python:
        '<Link href="https://github.com/saving-satoshi/bech32py/blob/main/bech32py/bech32.py" target="_blank" className="underline">Python: savingsatoshi_bech32py</Link>',
      success: 'ตอนนี้คุณมีที่อยู่ที่สามารถส่งบิตคอยน์ที่ขุดได้แล้ว',
    },

    outro_one: {
      title: 'บทส่งท้าย',
      nav_title: 'บทเสร็จสมบูรณ์',
      heading: 'สำเร็จ!',
      paragraph_one: 'คุณสร้างวอลเล็ตบิตคอยน์ของคุณเอง!',
      paragraph_two:
        'คุณถอนบิตคอยน์จากพูลการขุดเข้าสู่วอลเล็ตที่คุณเพิ่งสร้าง ตอนนี้คุณมีเงินทุนเต็มที่และพร้อมสำหรับทุกสิ่งที่ Vanderpoole และ BitRey จะโยนใส่คุณต่อไป',
    },
    resources: {
      public_key_three: {
        generator_point_heading: 'จุดกำเนิด',
        generator_point_paragraph:
          'จุดเฉพาะบนเส้นโค้ง secp256k1 ค่าของมันเป็นส่วนหนึ่งของมาตรฐาน secp256k1 และมันจะเหมือนเดิมเสมอ จุดนี้ไม่แตกต่างจากจุดอื่น ๆ บนเส้นโค้ง แต่ตกลงกันว่าเป็นจุดเริ่มต้นมาตรฐานสำหรับการคำนวณ ไม่มีใครรู้จริง ๆ ว่าทำไมจุดนี้ถึงถูกเลือก',
        elliptic_curve_operations_heading: 'การดำเนินการเส้นโค้งวงรี',
        elliptic_curve_operations_paragraph:
          'เส้นโค้งวงรีมีข้อกำหนดทางคณิตศาสตร์ของตัวเอง ดังนั้นการดำเนินการง่าย ๆ เช่น การบวกและการคูณจึงทำงานแตกต่างกัน เพื่อความเรียบง่ายและกระชับ สัญลักษณ์ที่กำหนดไว้จะถูกนำมาใช้ซ้ำ เช่น การใช้ “*” สำหรับการดำเนินการที่คล้ายกับการคูณ',
        discrete_log_heading: 'ลอการิทึมไม่ต่อเนื่อง',
        discrete_log_paragraph:
          'ระบบทางคณิตศาสตร์ที่คุณสามารถคูณได้ แต่ไม่สามารถหารได้ ตัวอย่างง่าย ๆ สำหรับสิ่งนี้คือการดูนาฬิกา สามชั่วโมงหลังจาก 11 นาฬิกาคือ 2 นาฬิกา ดังนั้นเราสามารถพูดได้ว่า “11+3=2” อย่างไรก็ตาม หากต้องการทำ “2-x=11” และแก้สมการสำหรับ x คุณจะมีคำตอบที่เป็นไปได้ไม่สิ้นสุด (3, 15, 27, 39...) อ่านเพิ่มเติมได้ที่ <Link href="https://en.wikipedia.org/wiki/Discrete_logarithm" className="underline">wikipedia</Link>',
        tip_one:
          'การคูณกับจุดเส้นโค้งวงรีไม่เหมือนกับการคูณที่คุณคุ้นเคยกับตัวเลขปกติ แล้วคุณจะทำการคูณได้อย่างไร? สังเกตว่าจุดกำเนิด, <span className="p-1 font-mono bg-[#0000004D] m-1">G</span> เป็นประเภท <span className="p-1 font-mono bg-[#0000004D] m-1">secp256k1.GE</span> ดูที่คลาสนั้นเพื่อดูว่าคุณสามารถเรียกใช้เมธอดใดได้บ้าง',
        tip_two:
          'ในขณะที่กุญแจส่วนตัวได้รับการยอมรับในรูปแบบเลขฐานสิบหก มันจำเป็นต้องถูกแปลงเป็นตัวเลข (BigInt หากคุณใช้ JS) ก่อนที่จะคูณกับจุดกำเนิด',
      },
      public_key_four: {
        y_coordinate_compression_heading: 'การบีบอัดกุญแจสาธารณะ',
        y_coordinate_compression_paragraph:
          'เมื่อคุณคำนวณการบวกจุดบนเส้นโค้งวงรี คุณใช้พิกัดของสองจุดเพื่อหาพิกัดของจุดที่สามที่อยู่บนเส้นโค้ง อย่างไรก็ตาม โดยปกติจะมีพิกัด y สองค่าที่เป็นไปได้สำหรับพิกัด x ที่กำหนด (ยกเว้นกรณีพิเศษบางกรณี) เมื่อบีบอัดกุญแจสาธารณะ คุณเลือกหนึ่งในพิกัด y เหล่านี้และรวมเฉพาะพิกัด x พร้อมกับตัวบ่งชี้ว่าควรใช้พิกัด y ใด ในกรณีนี้เราใช้เมตาดาต้าที่เพิ่มเข้ามาเพื่อระบุพิกัด y',
        tip: 'ความท้าทายนี้ค่อนข้างง่าย เราเพียงแค่พยายามกำหนดว่าพิกัด y เป็นเลขคู่หรือคี่เพื่อที่เราจะสามารถเพิ่มเมตาดาต้านั้นไปที่ด้านหน้าของกุญแจสาธารณะของเรา',
      },
      address_two: {
        hash_algo_heading: 'SHA-256, RIPEMD-160',
        hash_algo_paragraph:
          'ฟังก์ชันแฮชจะย่อยข้อมูลทุกชนิดและทุกขนาดและจะคืนผลลัพธ์ที่มีขนาดเท่ากันเสมอ สำหรับ SHA256 คือ 32 ไบต์ สำหรับ RIPEMD-160 คือ 20 ไบต์ ผลลัพธ์จะเป็นแบบกำหนด (ผลลัพธ์เดียวกันเสมอสำหรับอินพุตเดียวกัน) แต่ไม่สามารถแยกแยะได้จากการสุ่ม ฟังก์ชันแฮชจะลดข้อมูลให้เป็นลายนิ้วมือที่สม่ำเสมอและขนาดเล็ก',
        tip_one:
          'เมื่อคำนวณแฮช SHA-256 คุณจะต้องแน่ใจว่าได้แฮชคีย์ที่บีบอัดของคุณเป็นไบต์ไม่ใช่เฮกซ์ หากคุณใช้ JavaScript คุณจะต้องแปลงสตริงเฮกซ์เป็นบัฟเฟอร์',
        tip_two: 'ตรวจสอบให้แน่ใจว่าคุณทำอัลกอริธึมการแฮชในลำดับที่ถูกต้อง!',
      },
      address_three: {
        wpkh_heading: 'ที่อยู่ Witness Public Key Hash (wpkh)',
        wpkh_paragraph:
          'ที่อยู่บิตคอยน์คือสตริงของอักขระที่ออกแบบมาให้ผู้ใช้จัดการได้ มันสั้น ง่ายต่อการคัดลอกและวาง และมีการตรวจสอบความถูกต้องในตัวเพื่อให้แน่ใจว่าคัดลอกได้ถูกต้องเสมอ มันเข้ารหัสสคริปต์เอาต์พุตของบิตคอยน์อย่างปลอดภัยที่ผู้รับสามารถใช้จ่ายได้ มีหลายประเภทของสคริปต์เอาต์พุตและหลายกลไกการเข้ารหัส ในความท้าทายนี้ เราเข้ารหัสคีย์สาธารณะที่บีบอัดด้วย bech32 เพื่อสร้างสิ่งที่เรียกว่าที่อยู่แฮชคีย์สาธารณะพยาน',
        network_heading: 'Mainnet, Testnet, Signet, และ Regtest',
        network_paragraph:
          'เมื่อพัฒนาซอฟต์แวร์บิตคอยน์ สิ่งสำคัญคือต้องทดสอบโค้ดของคุณก่อนที่คุณจะไว้วางใจเงินจริงกับมัน! หนึ่งในวิธีที่ง่ายที่สุดในการทดสอบซอฟต์แวร์บิตคอยน์คือการใช้บล็อกเชนที่แตกต่างกันด้วยบล็อกกำเนิดใหม่ที่เหรียญไม่สำคัญ การขุดฟรีและง่าย และทุกอย่างสามารถรีเซ็ตได้ตลอดเวลา เชนเหล่านี้ได้รับการสนับสนุนโดยเครือข่ายโหนดที่ไม่รบกวนเหรียญจริงและโหนดบน Mainnet Testnet และ Signet เป็นชื่อของบล็อกเชนบิตคอยน์ทางเลือกสองแบบที่ได้รับการดูแลควบคู่ไปกับ Mainnet ในระดับโลก Regtest เป็นโหมดนักพัฒนาที่ออกแบบมาให้ทำงานในเครื่องโดยไม่ต้องเชื่อมต่อเครือข่ายเลย',
        tip: 'ตรวจสอบให้แน่ใจว่าคุณดูไลบรารี bech32 อย่างละเอียดเพื่อค้นหาวิธีการที่แน่นอนที่คุณสามารถใช้ได้',
      },
    },
  },

  chapter_five: {
    title: 'ซาโตชิ ตัวจริง โปรดลุกขึ้นยืน',
    paragraph_one:
      'มันดึกแล้ว และคุณเหนื่อย แต่เมื่อคุณหลับตาลงชั่วขณะ ข่าวร้ายสองเรื่องก็มาถึง',
    paragraph_two: '1) แวนเดอร์พูลกลับมาออกทีวีอีกครั้ง',
    paragraph_three: '2) เขาอ้างว่าเป็นเหลนของซาโตชิ นากาโมโตะ',
    paragraph_four: 'เขาดูเหมือนคนอดนอน',
    intro_one: {
      title: 'บทนำ',
      nav_title: 'อย่าเชื่อ ตรวจสอบ',
      paragraph_one:
        '—เดโบราห์ ชังค์: “คุณแวนเดอร์พูล คุณเพิ่งอ้างอย่างน่าตกใจบนโซเชียลมีเดียว่า คุณเป็นเหลนของซาโตชิ นากาโมโตะ ถูกต้องไหม? เป็นความจริงหรือไม่?”',
      paragraph_two:
        '—แวนเดอร์พูล: “มันเป็นความจริงแน่นอน เดโบราห์ ฉันเก็บความลับนี้มานานมาก คุณเห็นไหม ครอบครัวของฉันได้ส่งต่อซีดีรอมที่ดูไม่เด่นชัดลงมาหลายชั่วอายุคน เพื่อเก็บเป็นความลับ เราติดป้ายว่า <span className="italic">Creed – My Own Prison</span> มันมีคีย์ส่วนตัวของบิตคอยน์จำนวนมหาศาลของซาโตชิ นากาโมโตะ ดังนั้นเมื่อฉันพูดแทนนักขุด รู้ไว้ว่าฉันก็พูดแทนซาโตชิ นากาโมโตะด้วย”',
      paragraph_three:
        '—เดโบราห์ ชังค์: “มีวิธีใดที่เราสามารถตรวจสอบได้ว่าคุณเป็นเจ้าของคีย์ส่วนตัวของบิตคอยน์ของซาโตชิ นากาโมโตะจริงหรือไม่?”',
      paragraph_four:
        '—แวนเดอร์พูล: “แน่นอนว่ามี มันเป็นเรื่องง่ายของการเข้ารหัสคีย์สาธารณะ”',
      paragraph_five:
        '—เดโบราห์ ชังค์: “แต่ทำไมต้องรอนานขนาดนี้เพื่อเปิดเผยข้อมูลที่น่าตกใจนี้?”',
    },
    intro_two: {
      nav_title: 'คำกล่าวอ้างที่กล้าหาญของแวนเดอร์พูล',
      paragraph_one:
        '—แวนเดอร์พูล: “ฉันไม่มีความกล้า มีข่าวลือเกี่ยวกับประวัติครอบครัวของฉันเสมอ ข่าวลือที่ฉันสามารถยืนยันได้ง่ายๆ แต่ฉันไม่พร้อมสำหรับการเปิดเผยมากขนาดนั้น ท้ายที่สุด ฉันใช้ชีวิตอย่างถ่อมตนและสันโดษในปราสาทศตวรรษที่ 14 บนฟาร์มปศุสัตว์บนเกาะส่วนตัวที่ฉันชื่นชอบที่สุด ทำการสัมภาษณ์แบบนี้ 5-6 ครั้งต่อสัปดาห์จากอ่างน้ำร้อนของฉัน”',
      paragraph_two:
        '—แวนเดอร์พูล: “แต่ตอนนี้อนาคตของบิตคอยน์อยู่ในสาย ฉันรู้ว่าถึงเวลาต้องเผชิญกับความจริง โดยเฉพาะเพลงจากอัลบั้มเปิดตัวของ Creed, My Own Prison” *แวนเดอร์พูลฮัมทำนองเพลงจากอัลบั้มชื่อเดียวกันในศตวรรษที่ 20*',
      paragraph_three:
        '—แวนเดอร์พูล: "ฉันขอโทษที่ไม่ได้ออกมาเปิดเผยเร็วกว่านี้เพราะซีดีรอมยังมีแผนการปรับปรุงของซาโตชิ นากาโมโตะสำหรับบิตคอยน์ คุณเห็นไหม เหล่าของฉันเสียใจเสมอที่จำกัดจำนวนบิตคอยน์ไว้ที่ 21 ล้านเหรียญ ซึ่งเป็นเหตุผลที่ฉันวางแผนที่จะทำตามความฝันของเหล่าของฉันในการฮาร์ดฟอร์กบิตคอยน์เพื่อการออกบิตคอยน์อย่างต่อเนื่อง"',
    },
    intro_three: {
      nav_title: 'ข้อความจากซาโตชิ',
      paragraph_one:
        'หน้าจอ TXM4H-A Hover ของคุณส่งเสียงดังขึ้น คุณมีข้อความใหม่',
      paragraph_two: '—HOLOCAT: อย่าลืมแตะจมูกของฉัน',
      paragraph_three: 'คุณแตะจมูกของเธอ',
      paragraph_four: `—ซาโตชิ นากาโมโตะ: “แวนเดอร์พูลไม่ใช่คนที่เขาอ้างว่าเป็น คุณสามารถเปิดโปงเขาได้ ขอให้เขาพิสูจน์การเป็นเจ้าของบิตคอยน์ของซาโตชิโดยการลงนามข้อความโดยใช้คีย์ส่วนตัวของกระเป๋าเงินนั้น”`,
    },
    derive_message_one: {
      title: 'สร้างข้อความ',
      nav_title: 'ข้อความที่เป็นปัญหา',
      heading: 'แวนเดอร์พูลบอกว่าเขาได้ลงนามข้อความด้วยคีย์ของซาโตชิ:',
      code_one: `-----BEGIN BITCOIN SIGNED MESSAGE----- \n \n ฉันคือแวนเดอร์พูลและฉันควบคุมคีย์ส่วนตัวที่ซาโตชิใช้ลงนามในการทำธุรกรรมบิตคอยน์ครั้งแรกที่ยืนยันในบล็อก #170 ข้อความนี้ลงนามด้วยคีย์ส่วนตัวเดียวกัน \n \n -----BEGIN BITCOIN SIGNATURE----- \n \n`,
      code_two:
        '<span className="break-all"> H4vQbVD0pLK7pkzPto8BHourzsBrHMB3Qf5oYVmr741pPwdU2m6FaZZmxh4ScHxFoDelFC9qG0PnAUl5qMFth8k= </span>',
      code_three: '\n \n-----END BITCOIN SIGNATURE-----',
      paragraph_two: 'นี่หมายความว่าอย่างไร?',
    },
    derive_message_two: {
      nav_title: 'การค้นหาคีย์สาธารณะ',
      paragraph_one:
        'เราได้เรียนรู้ในบทที่ 4 ว่าคีย์ส่วนตัวเป็นตัวเลขสุ่มขนาดใหญ่ที่ถูกเก็บเป็นความลับโดยผู้ที่สร้างมันขึ้นมา เราสามารถใช้คณิตศาสตร์ Elliptic Curve เพื่อสร้างคีย์สาธารณะจากคีย์ส่วนตัวนั้น',
      paragraph_two:
        'คีย์สาธารณะสามารถแชร์เป็นตัวระบุที่ไม่ซ้ำกันและคีย์ส่วนตัวใช้เพื่อพิสูจน์ว่าบุคคลนั้นควบคุมตัวระบุนั้นได้ การพิสูจน์นั้นเรียกว่าลายเซ็น ในการสร้างลายเซ็นคุณต้องมีข้อความและคีย์ส่วนตัว ใครๆ ก็สามารถตรวจสอบลายเซ็นได้ด้วยสำเนาของข้อความและคีย์สาธารณะที่สอดคล้องกัน',
      paragraph_three:
        'แวนเดอร์พูลได้ให้ลายเซ็นและข้อความแล้ว คีย์สาธารณะอยู่ที่ไหน?',
    },
    derive_message_three: {
      nav_title: 'ค้นหาลายเซ็นของซาโตชิ',
      heading: 'เริ่มต้นด้วยการค้นหาลายเซ็นของซาโตชิ',
      paragraph_one: `บล็อก #170 มี <link href="https://bitcointalk.org/index.php?topic=155054.0" target="_blank" className="underline">การทำธุรกรรมบิตคอยน์ครั้งแรก</link> ที่ทำจากซาโตชิถึง Hal Finney การทำธุรกรรมนั้นมีเพียง <Link href="https://blockstream.info/tx/f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16?expand" target="_blank" className="underline">อินพุตเดียว</Link> ดึง scriptSig จากอินพุตนั้น มันมีลายเซ็นของซาโตชิ!`,
      placeholder: 'วางข้อมูลที่นี่',
      success:
        'ทำได้ดีมาก! นี่คือลายเซ็นของซาโตชิจริงๆ ที่อนุญาตให้โอนบิตคอยน์ของเขาไปยัง Hal Finney',
    },
    derive_message_four: {
      nav_title: 'ค้นหาคีย์สาธารณะของซาโตชิ',
      heading: 'แล้วคีย์สาธารณะของเขาอยู่ที่ไหน?',
      paragraph_one:
        'มันถูกเก็บไว้พร้อมกับบิตคอยน์ที่ซาโตชิสร้างขึ้นโดยการขุดบล็อก #9',
      paragraph_two:
        '<Link href="https://blockstream.info/tx/0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9?output:0&expand" target="_blank" className="underline">ติดตามลิงก์</Link> ไปยังธุรกรรมต้นทางที่ด้านบนของส่วนอินพุต #0 นี่คือธุรกรรมที่ซาโตชิสร้างขึ้นโดยการขุดบล็อก #9 ธุรกรรมนี้สร้าง 50 BTC และล็อคไว้ภายใต้การควบคุมของ... คีย์สาธารณะ! ค้นหาข้อมูลที่เริ่มต้นด้วย 0411... ใน scriptPubKey',
      paragraph_three:
        'คีย์สาธารณะอยู่ระหว่างคำสั่งสคริปต์ OP_PUSHBYTES และ OP_CHECKSIG วางข้อมูลด้านล่าง:',
      placeholder: 'วางข้อมูลที่นี่',
      success: 'นั่นแหละ!',
    },
    derive_message_five: {
      nav_title: 'การตรวจสอบลายเซ็นต่อไป',
      paragraph_one: `ในแบบฝึกหัดก่อนหน้านี้เราเห็นว่าซาโตชิได้รับ 50 BTC จากการขุดบล็อก #9 เขาใช้สิ่งนั้นเป็นอินพุตสำหรับการทำธุรกรรมของเขากับ Hal Finney (ในบล็อก #170) โดยส่ง 10 BTC ไปยังคีย์สาธารณะของ Hal Finney และคืน 40 BTC กลับไปยังตัวเองเป็นเงินทอน คีย์ส่วนตัวของซาโตชิถูกใช้เพื่อสร้างลายเซ็นที่อนุญาตให้โอนเงินเหล่านั้น`,
      paragraph_two:
        'ต่อไปเราต้องเรียนรู้วิธีการตรวจสอบลายเซ็น แต่ยังมีบางอย่างที่ขาดหายไป... ข้อความที่ซาโตชิลงนามเพื่ออนุญาตการทำธุรกรรมสำหรับ Hal คืออะไร?',
    },
    derive_message_six: {
      nav_title: 'สร้างข้อความ',
      heading: 'สร้างข้อความจากการทำธุรกรรม',
      paragraph_one:
        'ควรจะชัดเจนเมื่อดูที่หน้าเว็บบล็อกเอ็กซ์พลอเรอร์ว่าการทำธุรกรรมบิตคอยน์มีหลายส่วน บางส่วนเป็นเพียงตัวเลขเล็กๆ และบางส่วนเป็นชิ้นส่วนข้อมูลขนาดใหญ่ โปรโตคอลบิตคอยน์มีอัลกอริธึมเฉพาะสำหรับการสร้างข้อความจากการทำธุรกรรม เพื่อให้ข้อความเหล่านั้นสามารถลงนามโดยคีย์ส่วนตัวได้',
      paragraph_two:
        'เราจะสรุปกระบวนการที่ระบุไว้ <Link href="https://en.bitcoin.it/wiki/OP_CHECKSIG" target="_blank" className="underline">ที่นี่</Link> มันใช้ <Link href="https://en.bitcoin.it/wiki/OP_CHECKSIG#Code_samples_and_raw_dumps" target="_blank" className="underline">ธุรกรรมเดียวกันนี้จากบล็อก #170</Link> เป็นตัวอย่าง',
      paragraph_three:
        'ในการเริ่มต้น เราต้องการไบต์ดิบที่ประกอบขึ้นเป็นการทำธุรกรรมทั้งหมด <Link href="https://blockstream.info/api/tx/f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16/hex" target="_blank" className="underline">บล็อกเอ็กซ์พลอเรอร์ของเรา</Link> สามารถช่วยได้ ใช้ API endpoint "hex" และวางข้อมูลทั้งหมด',
      input_challenge_label: 'วางข้อมูลการทำธุรกรรม',
      success_message_line_one:
        'นี่คือการทำธุรกรรมดิบพร้อมส่วนประกอบแต่ละส่วนที่ติดป้ายกำกับ:',
      success_message_line_two: 'เวอร์ชัน:',
      success_message_line_three: 'จำนวนอินพุต:',
      success_message_line_four: 'แฮชของธุรกรรมที่อินพุต #0 มาจาก:',
      success_message_line_five: 'ดัชนีของอินพุต #0 ในธุรกรรมการระดมทุน:',
      success_message_line_six: 'scriptSig เพื่ออนุญาตการใช้จ่ายอินพุต #0:',
      success_message_line_seven: 'ลำดับอินพุต #0:',
      success_message_line_eight: 'จำนวนเอาต์พุต:',
      success_message_line_nine:
        'ค่าเอาต์พุต #0 (10 BTC หรือ 1,000,000,000 ซาโตชิ):',
      success_message_line_ten:
        'scriptPubKey ของเอาต์พุต #0 (คีย์สาธารณะของ Hal Finney บวก OP_CHECKSIG):',
      success_message_line_eleven:
        'ค่าเอาต์พุต #1 (40 BTC หรือ 4,000,000,000 ซาโตชิ):',
      success_message_line_twelve:
        'scriptPubKey ของเอาต์พุต #1 (คีย์สาธารณะของซาโตชิเองอีกครั้งสำหรับเงินทอน):',
      success_message_line_thirteen: 'เวลาล็อก:',
    },
    derive_message_seven: {
      nav_title: 'สร้างข้อความเพื่อเซ็น',
      paragraph_one:
        'เป็นไปไม่ได้ที่จะเซ็นข้อความที่มีลายเซ็นของตัวเอง ดังนั้น scriptSig ต้องถูกลบออก ในโปรโตคอลบิตคอยน์มันจะถูกแทนที่ด้วย scriptPubKey ของเอาต์พุตการทำธุรกรรมที่เรากำลังใช้จ่าย',
      paragraph_two:
        'เราได้พบ scriptPubKey ในขั้นตอนก่อนหน้านี้แล้ว คุณสามารถวางลงในช่องว่างแรก',
      paragraph_three: {
        a: 'สิ่งสุดท้ายที่เราต้องการสำหรับข้อความการทำธุรกรรมของเราคือ',
        b: 'เราจะครอบคลุมเรื่องนี้เพิ่มเติมในบทต่อไป แต่ตอนนี้เราจะเพิ่มค่า <span className="font-bold">01000000</span> ลงท้ายข้อความ',
      },
      tooltip_one: {
        question: 'sighash flags คืออะไร?',
        link: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520are%2520sighash%2520flags%253F',
        highlighted: 'sighash type flag',
      },
      success: 'เยี่ยม! คุณได้สร้างข้อความเพื่อเซ็นแล้ว',
    },
    verify_signature_one: {
      title: 'ตรวจสอบลายเซ็น',
      nav_title: 'การตรวจสอบลายเซ็น',
      heading: 'ในที่สุดเราก็มีข้อความ!',
      paragraph_one:
        'เรายังมีลายเซ็นที่เรารู้ว่าซาโตชิสร้างขึ้นด้วยคีย์ส่วนตัวของเขาเอง และเรามีคีย์สาธารณะของเขา มาดูวิธีการตรวจสอบลายเซ็นกัน แล้วเราจะลองตรวจสอบลายเซ็นของแวนเดอร์พูล',
    },
    verify_signature_two: {
      title: 'ตรวจสอบลายเซ็น',
      nav_title: 'แฮชข้อความ',
      heading: 'แฮชการย่อยธุรกรรม',
      paragraph_one:
        'ข้อมูลการทำธุรกรรมที่เรารวบรวมในขั้นตอนสุดท้ายนั้นยาวเกินไปที่จะเซ็นหรือยืนยันด้วย ECDSA',
      paragraph_two:
        'เรารู้วิธีใดในการบีบอัดข้อมูลขนาดใหญ่ให้เป็นชิ้นส่วนที่สม่ำเสมอและจัดการได้มากขึ้นหรือไม่? แน่นอนว่าเรารู้: การแฮช',
      paragraph_three: {
        a: 'โปรโตคอลบิตคอยน์ใช้ ',
        b: ' เพื่อบีบอัดการทำธุรกรรมให้เป็นข้อความที่สามารถเซ็นได้',
      },
      paragraph_four:
        'เมื่อเราได้แฮชขนาด 32 ไบต์ ข้อมูลนั้นจะถูกตีความใหม่เป็นจำนวนเต็ม ใช่แล้ว จำนวนเต็มขนาด 32 ไบต์ (ซึ่งเป็นตัวเลขที่ใหญ่มากจริงๆ)!',
      tooltip_one: {
        question: 'ทำไมทุกอย่างในบิตคอยน์ถึงใช้แฮชคู่ (HASH256)?',
        link: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=Why%2520does%2520everything%2520in%2520bitcoin%2520use%2520double%2520hash%2520%28HASH256%29%253F',
        highlighted: 'การย่อย SHA256 คู่',
      },
      success: 'ทำได้ดีมาก!',
    },
    verify_signature_three: {
      nav_title: 'ถอดรหัสลายเซ็น',
      heading: 'ถอดรหัสลายเซ็น',
      label_one: 'วางค่า R',
      label_two: 'วางค่า S',
      paragraph_one:
        'ลายเซ็นของซาโตชิถูกเข้ารหัสในระบบที่เรียกว่า DER ซึ่งเป็นชุดย่อยของ ASN.1',
      paragraph_two:
        'มีตัวเลขขนาด 32 ไบต์สองตัวที่เราต้องดึงออกมา พวกมันถูกเรียกว่า R และ S ตามลำดับ และแต่ละตัวมีคำนำหน้าเป็นไบต์ 0220 ในลำดับ DER แทนที่จะถอดรหัส DER ทั้งหมด ให้มองหาคำนำหน้าและวางค่า R และ S',
      paragraph_three:
        '# ลายเซ็นของซาโตชิ จาก scriptSig อินพุตของธุรกรรมไปยัง Hal Finney (บล็อก 170)',
    },
    verify_signature_four: {
      nav_title: 'ถอดรหัสคีย์สาธารณะ',
      heading: 'ถอดรหัสคีย์สาธารณะ',
      label_one: 'วางพิกัด x',
      label_two: 'วางพิกัด y',
      paragraph_one:
        'เราได้เรียนรู้ในบทที่ 4 ว่าคีย์สาธารณะจริงๆ แล้วเป็นจุดในเส้นโค้ง ECDSA หมายความว่าพวกมันมีค่า x และ y ไบต์แรก 04 หมายถึง "ไม่บีบอัด" (ตรงข้ามกับ 02 และ 03 อย่างที่เราเรียนรู้ในบทที่ 4) ลบไบต์แรกนั้นออกและข้อมูลที่เหลือคือพิกัด x และ y ขนาด 32 ไบต์ คัดลอกและวางอีกครั้ง',
      paragraph_two:
        '# คีย์สาธารณะของซาโตชิ จาก scriptPubKey ของบล็อก 9 coinbase output',
    },
    verify_signature_five: {
      title: 'ตรวจสอบลายเซ็น',
      nav_title: 'ทดสอบลายเซ็น',
      heading: 'ตรวจสอบลายเซ็น!',
      success: 'คุณทำได้แล้ว! คุณได้ตรวจสอบลายเซ็นของซาโตชิ!',
      paragraph_one:
        'ณ จุดนี้เรามีทุกอย่างที่เราต้องการเพื่อทำคณิตศาสตร์ ECDSA',
      paragraph_two:
        'อัลกอริธึมการตรวจสอบลายเซ็น ECDSA อธิบายไว้ <Link className="underline" href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm#Signature_verification_algorithm" target="_blank">ที่นี่</Link> และ <Link className="underline" href="https://www.secg.org/sec1-v2.pdf#page=52" target="_blank">ที่นี่</Link>',
      paragraph_three:
        'เราได้สร้างวัตถุ Group Element จากองค์ประกอบคีย์สาธารณะ X และ Y สำหรับคุณ คุณต้องทำการติดตั้งฟังก์ชันการตรวจสอบลายเซ็น ECDSA <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">verify()</span> ที่ควรคืนค่า True เท่านั้นหากทุกอย่างถูกต้อง!',
      paragraph_four:
        'เรารู้ว่าลายเซ็นของซาโตชิถูกต้อง มันถูกตรวจสอบโดยโหนดบิตคอยน์เต็มทุกโหนดตั้งแต่ปี 2010! หากโปรแกรมของคุณไม่คืนค่า True แสดงว่ามีบางอย่างผิดพลาด',
      python: {
        paragraph_five_part_one:
          'คำแนะนำ: เมธอด <span className="text-green">pow()</span>',
        paragraph_five_part_two:
          'สามารถยอมรับเลขชี้กำลังลบและโมดูลัสเป็นอาร์กิวเมนต์ได้ อ่านเพิ่มเติมใน <Link className="underline" href="https://docs.python.org/3/library/functions.html#pow" target="_blank">เอกสาร</Link>',
      },
      javascript: {
        paragraph_five_part_one:
          'เราได้จัดเตรียมฟังก์ชันช่วยเหลือ <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">invert()</span>',
        paragraph_five_part_two:
          'ซึ่งคุณจะต้องใช้แทนฟังก์ชันการยกกำลังแบบโมดูลาร์ของ JavaScript',
      },
    },
    validate_signature_one: {
      title: 'ตรวจสอบลายเซ็น',
      nav_title: 'เตรียมข้อความ',
      heading: 'เตรียมข้อความของแวนเดอร์พูลสำหรับการตรวจสอบ',
      paragraph_one:
        'แวนเดอร์พูลใช้ <Link href="https://github.com/bitcoin/bips/blob/master/bip-0137.mediawiki" target="_blank" className="underline">โปรโตคอลการลงนามข้อความบิตคอยน์</Link> สำหรับการแสดงของเขา การคำนวณใช้วิธีการเดียวกับที่เราได้กำหนดไว้แล้ว แต่การเตรียมข้อมูลจะแตกต่างกันเล็กน้อย',
      paragraph_two:
        'ก่อนอื่นเราต้องเข้ารหัสข้อความของเขาเป็นอาร์เรย์ของไบต์ตามเทมเพลตต่อไปนี้:',
      paragraph_three: {
        pre_link: 'จากนั้นเราจะ',
        highlighted: 'แฮช SHA-256 คู่',
        question: 'ทำไมเราถึงแฮชคู่ในบิตคอยน์?',
        post_link:
          'ข้อมูลนั้น และแปลงแฮชนั้นเป็นจำนวนเต็ม ทำฟังก์ชัน <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">encode_message()</span> ให้สมบูรณ์ มันควรคืนค่าเป็นค่าเฮกซ์ขนาด 32 ไบต์',
      },
      success: 'ทำได้ดีมาก',
    },
    validate_signature_two: {
      nav_title: 'เตรียมลายเซ็น',
      heading: 'เตรียมลายเซ็นของแวนเดอร์พูลสำหรับการตรวจสอบ',
      paragraph_one:
        'โปรโตคอลการลงนามข้อความบิตคอยน์ที่แวนเดอร์พูลใช้ระบุว่าใช้ base64 สำหรับลายเซ็น เราจำเป็นต้องถอดรหัสสตริง base64 นั้นเป็นลำดับ 65 ไบต์ สำหรับตอนนี้ เราสามารถละเว้นไบต์แรกของเมตาดาต้า ข้อมูลที่เหลือคือค่า r และ s ขนาด 32 ไบต์ที่เราเรียนรู้ในขั้นตอนที่ 6',
      javascript: {
        paragraph_two: {
          post_link:
            'ทำฟังก์ชัน <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">decode_sig()</span> ให้สมบูรณ์',
          return: 'มันควรคืนค่าเป็นอาร์เรย์ที่มีค่า [r, s] เป็น BigInts',
        },
      },
      python: {
        paragraph_two: {
          post_link:
            'ทำฟังก์ชัน <span className=" text-green">decode_sig()</span> ให้สมบูรณ์',
          return: 'มันควรคืนค่าเป็นทูเพิลที่มีค่า (r, s)',
        },
      },
    },
    validate_signature_three: {
      title: 'ตรวจสอบลายเซ็น',
      nav_title: 'ดูว่าแวนเดอร์พูลโกหกหรือไม่',
      heading: 'ดังนั้น แวนเดอร์พูลเป็นคนโกหกหรือไม่?!',
      paragraph_one: `มารวบรวมส่วนประกอบที่จำเป็นทั้งหมดสำหรับโปรแกรมและตรวจสอบว่าลายเซ็นของแวนเดอร์พูลมาจากคีย์ส่วนตัวที่เชื่อมโยงกับคีย์สาธารณะของซาโตชิหรือไม่! โปรดกรอกพารามิเตอร์ที่ขาดหายไปเพื่อเรียกใช้ฟังก์ชัน <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm"> verify()</span> โดยใช้โค้ดที่ให้มา`,
      paragraph_two:
        'จากนั้นเราสามารถเรียกใช้โปรแกรมเพื่อดูว่าแวนเดอร์พูลโกหกหรือไม่ ตีกลองหน่อย...',
      success:
        'ข้อความนี้บ่งชี้ว่าลายเซ็นไม่ได้มาจากคีย์สาธารณะของซาโตชิ เนื่องจากการตรวจสอบล้มเหลว',
    },
    validate_signature_four: {
      title: 'ตรวจสอบลายเซ็น',
      nav_title: 'ค้นหาคีย์ที่ถูกต้อง',
      heading: 'แวนเดอร์พูลสร้างลายเซ็นนั้นได้อย่างไร?',
      paragraph_one:
        'Holocat พูดแทรกและบอกว่าผู้แปรพักตร์ใน BitRey ได้ส่งรายการคีย์สาธารณะที่แวนเดอร์พูลใช้บ่อยมาให้เรา บางทีเขาอาจใช้คีย์เหล่านี้เซ็นข้อความ',
      paragraph_two:
        'โปรดระบุคีย์ที่ทำให้กระบวนการตรวจสอบเสร็จสมบูรณ์สำเร็จ เพื่อให้เราสามารถระบุคีย์สาธารณะที่แวนเดอร์พูลใช้เซ็นข้อความนี้',
      paragraph_three:
        'ลองดูว่าคุณสามารถตรวจสอบข้อความและลายเซ็นของแวนเดอร์พูลโดยใช้คีย์เหล่านี้ได้หรือไม่?',
      success:
        'ลายเซ็นถูกต้องสำหรับคีย์สาธารณะนี้ของแวนเดอร์พูล นี่ไม่ใช่ซาโตชิ!',
    },
    outro_one: {
      title: 'บทส่งท้าย',
      nav_title: 'บทเสร็จสมบูรณ์',
      heading: 'แวนเดอร์พูลโกหก!',
      paragraph_one:
        'คุณได้เรียนรู้บทเรียนที่สำคัญที่สุดบทหนึ่งในบิตคอยน์ คุณไม่ได้เชื่อ คุณได้ตรวจสอบ<br><br>ในการทำเช่นนั้น คุณพบว่าแวนเดอร์พูลไม่ได้ใช้คีย์ของซาโตชิในการเซ็นข้อความ ทำให้เรื่องราวครอบครัวของเขา ความน่าเชื่อถือของเขา และความน่าเชื่อถือของ BitRey ถูกตั้งคำถาม<br><br>ตอนนี้ถ้าคุณสามารถเอาเพลงนั้นออกจากหัวได้ก็คงดี',
    },
    resources: {
      derive_message_three: {
        op_pushdata_heading: 'OP_PUSHDATA',
        op_pushdata_paragraph_one:
          'OP_PUSHDATA ในสคริปต์บิตคอยน์มีบทบาทสำคัญในการอำนวยความสะดวกในการแทรกชิ้นส่วนข้อมูลใดๆ ลงในบล็อกเชน มันเป็นหมวดหมู่ทั้งหมดของรหัสปฏิบัติการที่อนุญาตให้รวมองค์ประกอบข้อมูลที่มีขนาดแตกต่างกัน ทำให้ภาษาสคริปต์ของบิตคอยน์มีความหลากหลายมากขึ้น รหัสปฏิบัติการนี้มีความสำคัญอย่างยิ่งในการเปิดใช้งานการใช้งานฟังก์ชันสมาร์ทคอนแทร็กต์ต่างๆ และประเภทการทำธุรกรรมที่กำหนดเอง เนื่องจากเรารู้ว่าสิ่งนี้ควรจะดันข้อมูล 71 ไบต์ลงในสแต็ก คุณสามารถหาวิธีที่รหัสปฏิบัติการนี้อาจแสดงในรูปแบบเฮกซ์ได้หรือไม่? คุณสามารถอ่านเพิ่มเติมเกี่ยวกับ OP_CODES เหล่านี้และอื่นๆ ได้ <Link href="https://en.bitcoin.it/wiki/Script#Constants" target="_blank" className="underline">ที่นี่</Link>',
      },
      derive_message_four: {
        op_checksig_heading: 'OP_CHECKSIG',
        op_checksig_paragraph_one:
          'OP_CHECKSIG ในสคริปต์บิตคอยน์มีความสำคัญอย่างยิ่งในการตรวจสอบให้แน่ใจว่าคีย์ส่วนตัวที่ถูกต้องสามารถใช้จ่ายการทำธุรกรรมที่กำหนดได้ ในเกือบทุกสคริปต์บิตคอยน์จะมี OP_CHECKSIG เพื่อให้แน่ใจว่าบุคคลที่พยายามใช้จ่ายบิตคอยน์สามารถทำได้ด้วยคีย์ที่กำหนด คุณสามารถอ่านเกี่ยวกับ OP_CODES เหล่านี้และอื่นๆ ได้ <Link href="https://en.bitcoin.it/wiki/Script#Constants" target="_blank" className="underline">ที่นี่</Link>',
      },
      derive_message_six: {
        transaction_parts_heading: 'ส่วนประกอบของการทำธุรกรรม',
        transaction_parts_one:
          'เวอร์ชัน: เวอร์ชันนี้บ่งชี้ว่าการทำธุรกรรมจะถูกจัดระเบียบอย่างไร',
        transaction_parts_two: 'จำนวนอินพุต: จำนวนอินพุตในการทำธุรกรรมนี้',
        transaction_parts_three:
          'TXID อินพุต #0: นี่คือแฮชของการทำธุรกรรมที่อินพุต #0 ใช้จ่าย',
        transaction_parts_four:
          'ดัชนีอินพุต #0: นี่คือดัชนีเอาต์พุตของการทำธุรกรรมที่ระบุโดย TXID ข้างต้นที่ให้แหล่งเงินทุน',
        transaction_parts_five:
          'Scriptsig: นี่คือข้อมูลที่อนุญาตให้ใช้จ่ายเอาต์พุตที่ระบุไว้ข้างต้น โดยทั่วไปประกอบด้วยลายเซ็น',
        transaction_parts_six:
          'ลำดับอินพุต #0: นี่คือลำดับหมายเลขสำหรับอินพุตการใช้จ่าย',
        transaction_parts_seven:
          'จำนวนเอาต์พุต: นี่บ่งชี้ว่าการทำธุรกรรมมีเอาต์พุตกี่รายการ',
        transaction_parts_eight:
          'ค่าเอาต์พุต #0: นี่คือจำนวนเงินที่ใช้จ่ายโดยเอาต์พุตแรก แสดงเป็นจำนวนเต็มเล็กน้อย',
        transaction_parts_nine:
          'scriptPubKey เอาต์พุต #0: นี่คือสคริปต์ที่กำหนดสิ่งที่จำเป็นในการใช้จ่ายเงิน โดยทั่วไปประกอบด้วยคีย์สาธารณะและรหัสปฏิบัติการอื่นๆ ที่สร้างความท้าทาย',
        transaction_parts_ten:
          'ค่าเอาต์พุต #1: นี่คือจำนวนเงินที่ใช้จ่ายโดยเอาต์พุตที่สอง แสดงเป็นจำนวนเต็มเล็กน้อย',
        transaction_parts_eleven:
          'scriptPubKey เอาต์พุต #1: นี่คือสคริปต์ที่กำหนดสิ่งที่จำเป็นในการใช้จ่ายเงิน โดยทั่วไปประกอบด้วยคีย์สาธารณะและรหัสปฏิบัติการอื่นๆ ที่สร้างความท้าทาย',
        transaction_parts_twelve:
          'เวลาล็อก: ความสูงของบล็อกก่อนที่การทำธุรกรรมนี้จะไม่ถูกต้องสำหรับการยืนยัน',
      },
      derive_message_seven: {
        sighash_type_flag_heading: 'SigHash Type Flag',
        sighash_type_flag_paragraph_one:
          'SigHash flags เป็นกลไกในบิตคอยน์ที่กำหนดว่าส่วนใดของการทำธุรกรรมที่จะรวมอยู่ในแฮชที่ลงนามโดยคีย์ส่วนตัว โดยพื้นฐานแล้วพวกมันกำหนดขอบเขตของความมุ่งมั่นโดยผู้ลงนามต่อส่วนเฉพาะของข้อมูลการทำธุรกรรม SigHash flag เป็นไบต์เดียวที่ต่อท้ายแต่ละลายเซ็นและสามารถแตกต่างกันระหว่างอินพุตภายในธุรกรรมเดียวกัน มีหลายประเภทของ SigHash flags ที่คุณสามารถเรียนรู้เพิ่มเติมได้ <Link href="https://river.com/learn/terms/s/sighash-flag" target="_blank" className="underline">ที่นี่</Link>',
      },
      verify_signature_two: {
        tip_one:
          'คำแนะนำ JavaScript: คุณสามารถแปลงสตริงเฮกซ์เป็นบัฟเฟอร์ของไบต์โดยใช้ <span className="p-1 font-mono bg-[#0000004D] m-1">Buffer.from(someString, \'hex\');</span>',
        signature_verification_heading: 'การตรวจสอบลายเซ็น',
        signature_verification_paragraph_one:
          'การตรวจสอบลายเซ็นเป็นอัลกอริธึมทางคณิตศาสตร์ที่ฝ่ายหนึ่งให้ข้อมูลชิ้นหนึ่ง (ลายเซ็น) ที่สามารถสร้างได้ก็ต่อเมื่อฝ่ายนั้นรู้ตัวเลขลับ (คีย์ส่วนตัว) การตรวจสอบเกี่ยวข้องกับการเปรียบเทียบลายเซ็น คีย์สาธารณะ และข้อความที่กำหนด หากอัลกอริธึมส่งออกค่า TRUE boolean แสดงว่าลายเซ็นนั้นถือว่าถูกต้อง',
      },
      verify_signature_three: {
        signature_encoding_heading: 'การเข้ารหัสลายเซ็น',
        signature_encoding_paragraph_one:
          'ลายเซ็น (DER) หรือ Distinguished Encoding Rules เป็นเพียงรูปแบบที่ใช้ในการเข้ารหัสลายเซ็น ECDSA ในบิตคอยน์ ลายเซ็น ECDSA ถูกสร้างขึ้นโดยใช้คีย์ส่วนตัวและแฮชของข้อความที่ลงนาม มันประกอบด้วยตัวเลขขนาด 32 ไบต์สองตัว (r,s) มีหลายส่วนประกอบที่คุณสามารถเรียนรู้เพิ่มเติมได้ <Link href="https://technicaldifficulties.io/2020/07/22/bip-66-unpacking-der-signatures/" target="_blank" className="underline">ที่นี่</Link>',
      },
      verify_signature_four: {
        eliptic_curve_heading:
          'อัลกอริธึมลายเซ็นดิจิทัลแบบเส้นโค้งวงรี (ECDSA)',
        eliptic_curve_paragraph_one:
          'ECDSA เป็นอัลกอริธึมการเข้ารหัสที่ใช้โดยบิตคอยน์เพื่อให้แน่ใจว่าเงินสามารถใช้จ่ายได้โดยเจ้าของที่ถูกต้องเท่านั้น คีย์สาธารณะได้มาจากคีย์ส่วนตัวผ่านการคูณเส้นโค้งวงรี ซึ่งคำนวณได้ง่าย อย่างไรก็ตาม การย้อนกลับกระบวนการนี้เพื่อให้ได้คีย์ส่วนตัวจากคีย์สาธารณะนั้นไม่สามารถทำได้ทางคณิตศาสตร์ ฟังก์ชันทางเดียวนี้เป็นรากฐานของความปลอดภัยของบิตคอยน์',
        public_private_key_heading: 'คีย์สาธารณะและคีย์ส่วนตัว',
        public_private_key_paragraph_one:
          'ในบิตคอยน์ คู่ของคีย์ถูกใช้เพื่อให้แน่ใจว่าการทำธุรกรรมมีความปลอดภัย คีย์ส่วนตัวที่เก็บเป็นความลับใช้ในการลงนามการทำธุรกรรมและพิสูจน์ความเป็นเจ้าของที่อยู่บิตคอยน์ คีย์สาธารณะที่ได้มาจากคีย์ส่วนตัวสามารถแชร์ได้และใช้ในการตรวจสอบว่าลายเซ็นถูกสร้างโดยผู้ถือคีย์ส่วนตัวโดยไม่เปิดเผยคีย์ส่วนตัว',
      },
      verify_signature_five: {
        finite_field_arithmetic_heading: 'เลขคณิตฟิลด์จำกัด',
        finite_field_arithmetic_paragraph_one:
          'เลขคณิตประเภทนี้ที่ใช้ใน ECDSA เกี่ยวข้องกับตัวเลขภายในช่วงหรือฟิลด์ที่กำหนด การดำเนินการเช่นการบวก การลบ การคูณ และการหาผกผันโมดูลาร์จะดำเนินการตามขนาดของฟิลด์นี้ ซึ่งเป็นสิ่งสำคัญสำหรับการคำนวณเส้นโค้งวงรีในวิทยาการเข้ารหัสลับของบิตคอยน์',
        ge_and_fe_heading: 'องค์ประกอบกลุ่ม (GE) และองค์ประกอบฟิลด์ (FE)',
        ge_and_fe_paragraph_one:
          'ในบริบทของการเข้ารหัสลับเส้นโค้งวงรี องค์ประกอบกลุ่มมักจะแทนจุดบนเส้นโค้งวงรี ในความท้าทายนี้ GE หมายถึงจุดดังกล่าวที่มีพิกัด x และ y เฉพาะ FE หมายถึงองค์ประกอบของฟิลด์จำกัดที่ใช้สำหรับการคำนวณภายในข้อจำกัดของฟิลด์',
        modular_inverse_heading: 'ผกผันโมดูลาร์',
        modular_inverse_paragraph_one:
          'ผกผันโมดูลาร์ของตัวเลข a โมดูล m คือตัวเลข b ที่ทำให้ (a * b) % m = 1 การหาผกผันโมดูลาร์เป็นขั้นตอนสำคัญในการตรวจสอบลายเซ็น ECDSA มันถูกใช้ในการคำนวณ u1 และ u2 ระหว่างกระบวนการตรวจสอบ',
      },
      validate_signature_one: {
        message_verification_heading: 'ความสำคัญของการตรวจสอบข้อความ',
        message_verification_paragraph_one:
          'การตรวจสอบข้อความช่วยเพิ่มความปลอดภัยของการสื่อสารภายในระบบนิเวศของบิตคอยน์ มันช่วยให้ฝ่ายต่างๆ สามารถตรวจสอบความถูกต้องและความสมบูรณ์ของข้อความ ซึ่งมีคุณค่าในสถานการณ์ที่ความไว้วางใจและการตรวจสอบมีความสำคัญ เช่น ในการทำธุรกรรมแบบเพียร์ทูเพียร์หรือการสื่อสารระหว่างฝ่ายต่างๆ ในสมาร์ทคอนแทร็กต์ นอกจากนี้ การตรวจสอบข้อความยังเป็นรากฐานสำหรับแอปพลิเคชันต่างๆ รวมถึงการตรวจสอบตัวตนและการรับรองความเป็นเจ้าของที่อยู่บิตคอยน์เฉพาะ มันเพิ่มชั้นของการรับรองการเข้ารหัสลับ เสริมสร้างธรรมชาติที่ไม่ต้องเชื่อถือและกระจายอำนาจของเครือข่ายบิตคอยน์',
      },
      validate_signature_two: {
        base64_encoding_heading: 'การเข้ารหัส Base64',
        base64_encoding_paragraph_one:
          'Base64 เป็นโครงร่างการเข้ารหัสไบต์เป็นข้อความพื้นฐานที่ช่วยให้ข้อมูลถูกแปลงเป็นไบต์ซึ่งสามารถใช้ในบัฟเฟอร์หรือจากไบต์เป็นข้อความในลักษณะที่หลีกเลี่ยงปัญหาเกี่ยวกับเส้นทาง URL และพารามิเตอร์การค้นหา สิ่งนี้แตกต่างจากโครงร่างการเข้ารหัส base58 ตรงที่ยังคงรวมอักขระที่คล้ายกัน (ศูนย์, ตัวอักษร O ตัวใหญ่, ตัวอักษร I ตัวใหญ่ และตัวอักษร l ตัวเล็ก) ที่อาจทำให้ผู้ใช้สับสนเมื่อพยายามคัดลอกหรือบอกข้อความที่เข้ารหัส',
      },
      validate_signature_three: {
        signing_and_ownership_heading: 'การลงนามข้อความและความเป็นเจ้าของ',
        signing_and_ownership_paragraph_one:
          'จากการไม่เปิดเผยตัวตนของบิตคอยน์ เราถูกจำกัดในสิ่งที่เราสามารถพิสูจน์ได้อย่างแน่ชัด เพราะเจ้าของคีย์สามารถปฏิเสธที่จะลงนามในข้อความหรือจงใจลงนามในข้อความด้วยคีย์ที่ไม่ถูกต้อง สิ่งเดียวที่เราสามารถพิสูจน์ได้คือคีย์ที่สร้างลายเซ็นที่ไม่ถูกต้องไม่ใช่คีย์ที่สามารถลงนามในข้อความได้',
      },
      validate_signature_four: {
        one_for_one_heading: 'หนึ่งต่อหนึ่ง',
        one_for_one_paragraph_one:
          'เพื่อให้แน่ใจว่าความน่าเชื่อถือและความปลอดภัยของ ECDSA ลายเซ็นที่สร้างโดยคีย์ส่วนตัวสามารถตรวจสอบได้โดยคีย์สาธารณะที่สอดคล้องกันเท่านั้น หากคีย์ส่วนตัวต่างๆ สามารถสร้างคีย์สาธารณะหรือลายเซ็นเดียวกันได้ จะทำลายความปลอดภัยและความน่าเชื่อถือของ ECDSA ผ่านสิ่งนี้เราสามารถรู้ได้ว่าคีย์สาธารณะที่สามารถลงนามในข้อความนี้มีความเป็นเจ้าของบิตคอยน์นี้',
      },
    },
  },

  chapter_six: {
    title: `The Keyholder`,
    paragraph_one:
      'Ahhh! Vanderpoole is out to get you for exposing his fraudulent claims. But despite the fact that the holocat is out of the bag, plenty of scared people continue to cling to the myth that Vanderpoole created around himself, his family, and their supposed ancestry. Times are scary, and people need a hero. Unfortunately, for many, he’s the best they’ve got.',
    intro_one: {
      title: 'Intro',
      nav_title: 'Was that really Satoshi',
      paragraph_one:
        '—SATOSHI NAKAMOTO: ”Well done. Now the world can see for itself that Vanderpoole is a fraud. Even if some don’t believe it yet, they will before our work is done.”',
      paragraph_two:
        'You pause for a moment and realize that every message up to this point has been signed “Satoshi Nakamoto.” You had just assumed that this was a pseudonym used by someone who adheres to bitcoin’s core principles. Surely, they couldn’t be the real Satoshi Nakamoto. But, you finally decide, it’s worth asking.',
      paragraph_three:
        '—”This might make me sound stupid, but are you the real Satoshi?”',
    },
    intro_two: {
      title: 'Intro',
      nav_title: 'Paying Mika 3000',
      paragraph_one:
        '—HOLOCAT: “Hardly the only thing to make you sound stupid lately.”',
      paragraph_two:
        '—SATOSHI NAKAMOTO: “Bitcoin moved far beyond its creator’s control many years ago. It would not matter if Vanderpoole or I were Satoshi, or one of their descendants. Bitcoin is defined by its community and cannot be co-opted by a single individual or entity—including Satoshi. Proving this is the real battle. I hope you don’t mind, but I asked your eccentric freelance reporter friend to reach out.”',
      paragraph_three: '—He what?',
      paragraph_four: '—Ding.',
      paragraph_five: '—HOLOCAT: Don’t forget to boop me.',
      paragraph_six: `—MIKA 3000: “You’ve got guts, but guts aren't enough. What you discovered is just the start. There’s more to this story, but we need to visit Vanderpoole’s private island to know for sure what "more" means. This will cost a lot, so I could use your help pulling funds off the multi-sig wallet that you helped me set up. You’ve still got one of my keys, right?”`,
    },
    in_out_one: {
      title: 'The ins and outs',
      nav_title: 'The unspent UTXO',
      paragraph_one:
        "Mika 3000 needs 1 BTC to buy gear for her trip to Vanderpoole's private island. You decide to send her 1 BTC from your chapter 3 mining rewards, which have been sent by the mining pool to the address you created in chapter 4.",
      paragraph_two:
        'You open your bitcoin full node and execute a command to see where your money is in the blockchain.',
      paragraph_three:
        'This is an unspent transaction output (aka "UTXO"). You might recognize your compressed public key hash and address from chapter 4. The amount looks right, too: 1.61 BTC.',
    },
    in_out_two: {
      title: 'The ins and outs',
      nav_title: 'The receiving address',
      paragraph_one:
        'Mika 3000 gives you an address to send your 1 BTC contribution to:',
      paragraph_two:
        'Hm, that address looks a lot longer than yours! I wonder why...',
      paragraph_three: `We need to create and sign a transaction that sends one of your 1.61 BTC to this address. We looked at Satoshi's transaction structure in chapter 5 but yours will be a bit different. Today, there are newer methods for creating transactions. We'll be using a protocol called Segregated Witness which sets the transaction version to 2.`,
    },
    in_out_three: {
      title: 'The ins and outs',
      nav_title: 'Transaction steps',
      paragraph_one:
        'Segregated Witness transactions work just like their legacy predecessors. There are a few global values like version and locktime. There is an array of inputs (UTXOs we want to spend) and an array of outputs (new UTXOs we want to create, for other people to spend in the future). There will also be an array of witnesses, one for each input. That is where signatures and scripts will go instead of the scriptSig.',
      paragraph_two:
        'The message serializations for all these components is documented <Link href="https://en.bitcoin.it/wiki/Protocol_documentation#tx" target="_blank" className="underline">here</Link>  and <Link href="https://github.com/bitcoinbook/bitcoinbook/blob/6d1c26e1640ae32b28389d5ae4caf1214c2be7db/ch06_transactions.adoc" target="_black" className="underline" >here</Link>.',
    },
    in_out_four: {
      normal: {
        title: 'The ins and outs',
        nav_title: 'The input class',
        heading: 'Looking at the Input class implementation',
        paragraph_one:
          'Bitcoin transaction inputs always point to existing, unspent transaction outputs. Therefore, our Input class has a method <span className="text-green"> from_output() </span> which is used to construct an Input by passing in the output description:',
        paragraph_two:
          'The first two arguments are the transaction ID and the index of the output of that transaction you want to spend from. Eventually we will pass in the txid and vout values you got above from listunspent. ',
        paragraph_three: {
          a: 'Hashes in bitcoin are ',
          b: {
            text: ' reversed ',
            question: 'Why do we reverse hashes in bitcoin?',
            href: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=why%2520are%2520hashes%2520reversed%2520in%2520bitcoin',
          },
          c: ' when we see them as hexadecimal strings. When we accept hashes as strings from a user we must reverse the byte order before storing or transmitting them as raw bytes. This is why we reverse the byte order of the txid argument that is passed in here.',
        },
        paragraph_four:
          "The second two arguments are the value of the output we want to spend (in satoshis) and something called a scriptcode. For now, we will just store that data as an empty byte array, we won't need it until later.",
        paragraph_five: `We also need a <span className="text-green"> serialize() </span> method that returns a byte array according to the specification. This is how the transaction is actually sent between nodes on the network, and how it is expressed in a block:`,
        heading_two: 'Outpoint',
        table_one: {
          heading: {
            one: 'Description',
            two: 'Name',
            three: 'Type',
            four: 'Size',
          },
          row_one: {
            column: {
              one: 'Hash of transaction being spent from',
              two: 'txid',
              three: 'bytes',
              four: '32',
            },
          },
          row_two: {
            column: {
              one: "Position of output being spent in the transaction's output array",
              two: 'index',
              three: 'int',
              four: '4',
            },
          },
        },
        heading_three: 'Input',
        table_two: {
          row_one: {
            column: {
              one: 'txid and output index being spent from',
              two: 'outpoint',
              three: 'bytes',
              four: '36',
            },
          },
          row_two: {
            column: {
              one: 'ScriptSig length (always 0 for Segregated Witness)',
              two: 'length',
              three: 'int',
              four: '1',
            },
          },
          row_three: {
            column: {
              one: 'Always empty for Segregated Witness',
              two: 'script',
              three: 'bytes',
              four: '0',
            },
          },
          row_four: {
            column: {
              one: 'Default value is 0xffffffff but can be used for relative timelocks',
              two: 'sequence',
              three: 'int',
              four: '4',
            },
          },
        },
        paragraph_six:
          'And remember: integers in bitcoin are serialized little-endian!',
        success: 'The Input class looks good. Great Work!',
      },
      hard: {
        title: 'The ins and outs',
        nav_title: 'Build the input class',
        heading: 'Finish the implementation of Class Input',
        paragraph_one: 'It should have the following method:',
        paragraph_two:
          'The First two arguments are the transaction ID and the index of the output of that transaction you want to spend from.',
        paragraph_three:
          'Eventually we will pass in the txid and vout values you got above from listunspent. Note that hashes in bitcoin are little-endian, which means that you will need to reverse the byte order of the txid string!',
        paragraph_four:
          "The second two arguments are the value of the output we want to spend (in satoshis) and something called a scriptcode. For now, just store these data as properties of the Input class, we won't need them until step 6.",
        paragraph_five:
          'We also need a <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> method that returns a byte array according to the specification:',
        heading_two: 'Outpoint',
        table_one: {
          heading: {
            one: 'Description',
            two: 'Name',
            three: 'Type',
            four: 'Size',
          },
          row_one: {
            column: {
              one: 'Hash of transaction being spent from',
              two: 'txid',
              three: 'bytes',
              four: '32',
            },
          },
          row_two: {
            column: {
              one: "Position of output being spent in the transaction's output array",
              two: 'index',
              three: 'int',
              four: '4',
            },
          },
        },
        heading_three: 'Input',
        table_two: {
          row_one: {
            column: {
              one: 'txid and output index being spent from',
              two: 'outpoint',
              three: 'bytes',
              four: '36',
            },
          },
          row_two: {
            column: {
              one: 'ScriptSig length (always 0 for Segregated Witness)',
              two: 'length',
              three: 'int',
              four: '1',
            },
          },
          row_three: {
            column: {
              one: 'Always empty for Segregated Witness',
              two: 'script',
              three: 'bytes',
              four: '0',
            },
          },
          row_four: {
            column: {
              one: 'Default value is 0xffffffff but can be used for relative timelocks',
              two: 'sequence',
              three: 'int',
              four: '4',
            },
          },
        },
        success: 'The Input class looks good. Great Work!',
      },
    },
    in_out_five: {
      title: 'The ins and outs',
      nav_title: 'Build the output class',
      heading: 'Finish the implementation of the Output class',
      paragraph_one:
        'Like the Input class, it needs a method <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">from_options()</span> that will construct an Output object from user-provided data:',
      paragraph_two: `It accepts a bitcoin address as a string (like the address from Mika 3000) and a value as an integer. The value is expressed as a number of satoshis! Remember, 1 BTC = 100000000 satoshis. You will need to use our bech32 library again to decode the address into version and data components.
        The class also needs a <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span>  method that returns a byte array according to the specification:`,
      heading_two: 'Output',
      table: {
        heading: {
          one: 'Description',
          two: 'Name',
          three: 'Type',
          four: 'Size',
        },
        row_one: {
          column: {
            one: 'Number of satoshis being sent.',
            two: 'value',
            three: 'bytes',
            four: '8',
          },
        },
        row_two: {
          column: {
            one: 'Total length of the following script (the "witness program")."',
            two: 'length',
            three: 'int',
            four: '1',
          },
        },
        row_three: {
          column: {
            one: 'The segregated witness version. Derived from the bech32 address.',
            two: 'version',
            three: 'int',
            four: '1',
          },
        },
        row_four: {
          column: {
            one: 'Length of the following witness program data.',
            two: 'length',
            three: 'int',
            four: '1',
          },
        },
        row_five: {
          column: {
            one: 'The data component derived from the bech32 address.',
            two: 'index',
            three: 'bytes',
            four: '(var)',
          },
        },
      },
      paragraph_three:
        "Don't forget: integers in bitcoin are serialized little-endian!",
      success: 'The Output class looks good. Great Work!',
    },
    put_it_together_one: {
      normal: {
        title: 'Putting it all together',
        nav_title: 'Build the transaction digest',
        heading: 'Transaction digest',
        paragraph_one:
          'In chapter 5 we learned that to sign a transaction we first need to rearrange and hash its data into a message, which becomes one of the raw inputs to our signing algorithm. Since we are using segregated witness now, we also need to implement the updated transaction digest algorithm which is specified in <Link href="https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki" target="_blank" className="underline">BIP 143</Link>.',
        paragraph_two:
          'Remember each transaction input needs its own signature, and so some components of the digest algorithm can be cached and reused but others will be different depending on which input is being signed! Finish the transaction method <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">digest(input_index)</span> that computes the 32-byte message for signing an input.',
        list_heading: 'Some notes:',
        list_one: '"Double SHA-256" or dSHA256 = sha256(sha256(data))',
        list_two:
          'value is the amount of the satoshis in the output being spent from. We added it to our Input class back in step 2, and just saved it there inside the class until now.',
        list_three:
          'scriptcode is the raw bitcoin script being evaluated. We also added this to our Input class back in step 2.',
        list_four: 'all integers are encoded as little-endian!',
        paragraph_three:
          "We'll dive in to this more in the next section, but to spend from your pay-to-witness-public-key-hash (P2WPKH) address, your scriptcode would be:",
        paragraph_four: '...which decodes to the following bitcoin script.',
        paragraph_five:
          'For more information about scriptcode see <Link href="https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki" target="_blank" className="underline">BIP 143</Link>.',
        paragraph_six:
          'The raw transaction has a preimage that is the serialization of:',
        headings: {
          item_one: 'Description',
          item_two: 'Name',
          item_three: 'Type',
          item_four: 'Size',
        },
        table: {
          row_one: {
            item_one: 'Transaction version, default 2',
            item_two: 'version',
            item_three: 'int',
            item_four: '4',
          },
          row_two: {
            item_one:
              'The dSHA256 of all outpoints from all inputs, serialized',
            item_two: 'bytes',
            item_three: 'bytes',
            item_four: '32',
          },
          row_three: {
            item_one:
              'The dSHA256 of all sequence values from all inputs, serialized',
            item_two: 'sequences',
            item_three: 'bytes',
            item_four: '32',
          },
          row_four: {
            item_one:
              'The serialized outpoint of the single input being signed ',
            item_two: 'outpoint',
            item_three: 'bytes',
            item_four: '36',
          },
          row_five: {
            item_one: 'The output script being spent from',
            item_two: 'scriptcode',
            item_three: 'bytes',
            item_four: '(var)',
          },
          row_six: {
            item_one:
              'The value in satoshis being spent by the single input being signed',
            item_two: 'value',
            item_three: 'int',
            item_four: '8',
          },
          row_seven: {
            item_one: 'The sequence value of the single input being signed',
            item_two: 'sequence',
            item_three: 'int',
            item_four: '4',
          },
          row_eight: {
            item_one: 'The dSHA256 of all outputs, serialized',
            item_two: 'outputs',
            item_three: 'bytes',
            item_four: '32',
          },
          row_nine: {
            item_one: 'Transaction locktime, default 0',
            item_two: 'locktime',
            item_three: 'int',
            item_four: '4',
          },
          row_ten: {
            item_one: 'Signature hash type, we will use 1 to indicate "ALL"',
            item_two: 'sighash',
            item_three: 'int',
            item_four: '4',
          },
        },
        paragraph_seven:
          'Finally, the message we sign is the double SHA-256 of all this serialized data.',
        success: 'The digest() method looks good. Great Work!',
      },
      hard: {
        title: 'Putting it all together',
        nav_title: 'Build the witness class',
        heading: 'Finish the implementation of Class Witness',
        paragraph_one:
          'It should have the following method, which accepts a byte array and adds that item to the witness stack.',
        paragraph_two:
          'It will also need a <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> method that returns the serialized witness stack.',
        subheading_one: 'Witness stack',
        headings: {
          item_one: 'Description',
          item_two: 'Name',
          item_three: 'Type',
          item_four: 'Size',
        },
        table_one: {
          row_one: {
            item_one: 'The number of items in the witness stack',
            item_two: 'count',
            item_three: 'int',
            item_four: '1',
          },
          row_two: {
            item_one: 'Serialized stack items',
            item_two: 'items',
            item_three: '(items)',
            item_four: '(var)',
          },
        },
        subheading_two: 'Witness stack item',
        table_two: {
          row_one: {
            item_one: 'Total length of the following stack item',
            item_two: 'length',
            item_three: 'int',
            item_four: '1',
          },
          row_two: {
            item_one: 'The raw bytes of the stack item',
            item_two: 'data',
            item_three: 'bytes',
            item_four: '(var)',
          },
        },
        success: 'The Witness class looks good. Great Work!',
      },
    },
    put_it_together_two: {
      normal: {
        title: 'Putting it all together',
        nav_title: 'Build the witness class',
        heading: 'Sign and Populate the Witness!',
        paragraph_one:
          'In the last chapter, we wrote some important ECDSA signature verification code. Now, in order to create a valid signature, we are going to take that code and rearrange it a bit.',
        paragraph_two:
          "In this exercise we'll be implementing some of the math behind the ECDSA signing algorithm. For more information on how that works, check out these resources:",
        paragraph_three:
          '• The Wikipedia page for <Link href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" target="_blank" className="underline">Elliptic Curve Digital Signature Algorithm</Link>',
        paragraph_four:
          '• <Link href="https://www.secg.org/sec1-v2.pdf#subsubsection.4.1.3" target="_blank" className="underline">Standards for Efficient Cryptography 1 (SEC 1)</Link>: Page 44, Section 4.1.3',
        heading_one: 'Step 1',
        paragraph_five:
          'In the Transaction class, there is a method, <span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1">compute_input_signature(index, key)</span> that accepts the index number of an input and a private key (a 32-byte integer, or BigInt in JavaScript). Finish this method so it computes the message digest for the chosen input. Use the <span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1">digest()</span> method from our last step, then return an ECDSA signature in the form of two 32-byte integers: <span className="italic">r</span> and <span className="italic">s</span>.',
        heading_two: 'Step 2',
        paragraph_six:
          'For the signing algorithm, the bitcoin protocol requires one more thing. The <span className="italic">s</span> value needs to be "low", meaning less than the order of the curve divided by 2. Add this check to <span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1">compute_input_signature()</span>.',
        paragraph_seven:
          'See <Link href="https://github.com/bitcoin/bips/blob/master/bip-0146.mediawiki#low_s" target="_blank" className="underline">BIP 146</Link> to learn more.',
        heading_three: 'Step 3',
        paragraph_eight:
          'Complete the method <span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1">sign_input(index, key)</span> so that it calls <span className="text-green p-1 text-base font-mono bg-[#0000004D] m-1"> compute_input_signature(index, key)</span>. When handling the return value, <span className="italic">r</span> and <span className="italic">s</span> need to be encoded with an algorithm called DER which we have implemented for you.',
        heading_four: 'Step 4',
        paragraph_nine:
          'Bitcoin requires an extra byte appended to the end of the DER-signature. This byte represents the "sighash type". For now we’ll always use the byte <span className="p-1 text-base font-mono bg-[#0000004D] m-1">0x01</span> for this, indicating "SIGHASH ALL".',
        heading_five: 'Step 5',
        paragraph_ten:
          'The last step is to create a Witness object with two stack items: the DER encoded signature blob we just made, and your compressed public key. Push the signature first, followed by the public key.',
        paragraph_eleven:
          "Append the witness stack object to the transaction object's array of witnesses.",
        success:
          'The compute_input_signature() and sign_input() methods look good. Great Work!',
      },
      hard: {
        title: 'Putting it all together',
        nav_title: 'Serialize the transaction',
        heading: 'Finish the implementation of Class Transaction',
        paragraph_one:
          'It should have global properties locktime and version as well as an array of inputs, outputs and witness stacks.',
        paragraph_two:
          'It will need a <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> method that outputs the enitire transaction as bytes formatted for broadcast on the bitcoin p2p network.',
        headings: {
          item_one: 'Description',
          item_two: 'Name',
          item_three: 'Type',
          item_four: 'Size',
        },
        table: {
          row_one: {
            item_one: 'Currently 2',
            item_two: 'version',
            item_three: 'int',
            item_four: '4',
          },
          row_two: {
            item_one: 'Must be exactly 0x0001 for segregated witness',
            item_two: 'flags',
            item_three: 'bytes',
            item_four: '2',
          },
          row_three: {
            item_one: 'The number of inputs',
            item_two: 'in count',
            item_three: 'int',
            item_four: '1',
          },
          row_four: {
            item_one: 'All transaction inputs,serialized',
            item_two: 'inputs',
            item_three: 'Inputs[]',
            item_four: '(var)',
          },
          row_five: {
            item_one: 'The number of outputs',
            item_two: 'out count',
            item_three: 'int',
            item_four: '1',
          },
          row_six: {
            item_one: 'All transaction outputs,serialized',
            item_two: 'outputs',
            item_three: 'Outputs[]',
            item_four: '(var)',
          },
          row_seven: {
            item_one: 'All witness stacks, serialized',
            item_two: 'witness',
            item_three: 'Witnesses[]',
            item_four: '(var)',
          },
          row_eight: {
            item_one: 'Setting to 0 indicates finality',
            item_two: 'locktime',
            item_three: 'int',
            item_four: '4',
          },
        },
        paragraph_three:
          'Notice that there is no "count" value for witnesses. That is because the number of witness stacks must always be exactly equal to the number of inputs.',
        success: 'The serialize() method looks good. Great Work!',
      },
    },
    put_it_together_three: {
      normal: {
        title: 'Put it All Together',
        nav_title: 'Sign the transaction',
        heading: 'Finish the implementation of Class Transaction',
        paragraph_one:
          'To complete our transaction we will need a <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> method that outputs the entire transaction as bytes formatted for broadcast on the bitcoin p2p network.',
        paragraph_two:
          'Our script should create and sign a Transaction object. It will have one input (the UTXO we identified in <span className="underline">The input class</span>) and two outputs:',
        paragraph_three:
          'We know our input, we know our output. Are we ready to build and sign a transaction? Not quite. We have a 1.61 BTC input and a 1 BTC output... what happens to the other 0.61 BTC? Most of that will be "change" and we need to send it back to our own address!',
        paragraph_four:
          'Notice that there is no "count" value for witnesses. That is because the number of witness stacks must always be exactly equal to the number of inputs.',
        paragraph_five:
          'But wait! We need to include a "fee". We\'ll shave off a tiny piece of our change output for the mining pools to incentivize them to include our transaction in a block. Let\'s reduce our change from 61,000,000 to 60,999,000 satoshis.',
        paragraph_six:
          'Finally our work is done. Your script should end by returning the result of the transaction serialize() method. This is a valid signed bitcoin transaction and we can broadcast it to the network to send Mika 3000 the money she needs!',
        headings: {
          item_one: 'Description',
          item_two: 'Name',
          item_three: 'Type',
          item_four: 'Size',
        },
        table: {
          row_one: {
            item_one: 'Currently 2',
            item_two: 'version',
            item_three: 'int',
            item_four: '4',
          },
          row_two: {
            item_one: 'Must be exactly 0x0001 for segregated witness',
            item_two: 'flags',
            item_three: 'bytes',
            item_four: '2',
          },
          row_three: {
            item_one: 'The number of inputs',
            item_two: 'in count',
            item_three: 'int',
            item_four: '1',
          },
          row_four: {
            item_one: 'All transaction inputs, serialized',
            item_two: 'inputs',
            item_three: 'Inputs[]',
            item_four: '(var)',
          },
          row_five: {
            item_one: 'The number of outputs',
            item_two: 'out count',
            item_three: 'int',
            item_four: '1',
          },
          row_six: {
            item_one: 'All transaction outputs, serialized',
            item_two: 'outputs',
            item_three: 'Outputs[]',
            item_four: '(var)',
          },
          row_seven: {
            item_one: 'All witness stacks, serialized',
            item_two: 'witness',
            item_three: 'Witnesses[]',
            item_four: '(var)',
          },
          row_eight: {
            item_one: 'Setting to 0 indicates finality',
            item_two: 'locktime',
            item_three: 'int',
            item_four: '4',
          },
        },
        bullet_one:
          'Mika 3000 gets 100,000,000 satoshis to bc1qgghq08syehkym52ueu9nl5x8gth23vr8hurv9dyfcmhaqk4lrlgs28epwj',
        bullet_two:
          'You get 61,000,000 back to your address bc1qm2dr49zrgf9wc74h5c58wlm3xrnujfuf5g80hs',
        success: "You've done it! You've built a transaction!",
      },
      hard: {
        title: 'Putting it all together',
        nav_title: 'Build the transaction digest',
        heading: 'Transaction digest',
        paragraph_one:
          'In chapter 5 we learned that to sign a transaction we first need to rearrange and hash its data into a message, which becomes one of the raw inputs to our signing algorithm. Since we are using segregated witness now, we also need to implement the updated transaction digest algorithm which is specified in <Link href="https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki" target="_blank" className="underline">BIP 143</Link>.',
        paragraph_two:
          'Remember each transaction input needs its own signature, and so some components of the digest algorithm can be cached and reused but others will be different depending on which input is being signed! Finish the transaction method <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">digest(input_index)</span> that computes the 32-byte message for signing an input.',
        list_heading: 'Some notes:',
        list_one: '"Double SHA-256" or dSHA256 = sha256(sha256(data))',
        list_two:
          'value is the amount of the satoshis in the output being spent from. We added it to our Input class back in step 2, and just saved it there inside the class until now.',
        list_three:
          'scriptcode is the raw bitcoin script being evaluated. We also added this to our Input class back in step 2.',
        paragraph_three:
          "We'll dive in to this more in the next section, but to spend from your pay-to-witness-public-key-hash address, your scriptcode would be:",
        paragraph_four: '...which decodes to the following bitcoin script.',
        paragraph_five:
          'For more information about scriptcode see <Link href="https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki" target="_blank" className="underline">BIP 143</Link>.',
        paragraph_six:
          'The raw transaction has a preimage that is the serialization of:',
        headings: {
          item_one: 'Description',
          item_two: 'Name',
          item_three: 'Type',
          item_four: 'Size',
        },
        table: {
          row_one: {
            item_one: 'Transaction version, default 2',
            item_two: 'version',
            item_three: 'int',
            item_four: '4',
          },
          row_two: {
            item_one:
              'The dSHA256 of all outpoints from all inputs, serialized',
            item_two: 'bytes',
            item_three: 'bytes',
            item_four: '32',
          },
          row_three: {
            item_one:
              'The dSHA256 of all sequence values from all inputs, serialized',
            item_two: 'sequences',
            item_three: 'bytes',
            item_four: '32',
          },
          row_four: {
            item_one:
              'The serialized outpoint of the single input being signed ',
            item_two: 'outpoint',
            item_three: 'bytes',
            item_four: '36',
          },
          row_five: {
            item_one: 'The output script being spent from',
            item_two: 'scriptcode',
            item_three: 'bytes',
            item_four: '(var)',
          },
          row_six: {
            item_one:
              'The value in satoshis being spent by the single input being signed',
            item_two: 'value',
            item_three: 'int',
            item_four: '8',
          },
          row_seven: {
            item_one: 'The sequence value of the single input being signed',
            item_two: 'sequence',
            item_three: 'int',
            item_four: '8',
          },
          row_eight: {
            item_one: 'The dSHA256 of all outputs, serialized',
            item_two: 'outputs',
            item_three: 'bytes',
            item_four: '32',
          },
          row_nine: {
            item_one: 'Transaction locktime, default 0',
            item_two: 'locktime',
            item_three: 'int',
            item_four: '4',
          },
          row_ten: {
            item_one: 'Signature hash type, we will use 1 to indicate "ALL',
            item_two: 'sighash',
            item_three: 'int',
            item_four: '4',
          },
        },
        paragraph_seven:
          'Finally, the message we sign is the double SHA-256 of all this serialized data.',
        success: 'The digest() method looks good. Great Work!',
      },
    },
    put_it_together_four: {
      hard: {
        title: 'Putting it all together',
        heading: 'Signing!',
        nav_title: 'Sign the transaction',
        paragraph_one: `We wrote the ECDSA signature verification code in the last chapter, now we need to rearrange that a bit to create a valid signature. Add a method called <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">compute_input_signature(index: int, key: int)</span> to your Transaction class that accepts an input index number and a private key (a 32-byte integer!). It should compute the message digest for the chosen input using the <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">digest()</span> method from step 6, and return an ECDSA signature in the form of two 32-byte integers r and s.`,
        paragraph_two:
          'See <Link href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" target="_blank" className="underline">this page</Link> for the ECDSA signing algorithm. Also <Link href="https://www.secg.org/sec1-v2.pdf#subsubsection.4.1.3" target="_blank" className="underline">this PDF</Link> (Page 44, Section 4.1.3).',
        paragraph_three:
          'The bitcoin protocol requires one extra step to the signing algorithm, which requires that the s value is "low", meaning less than the order of the curve divided by 2. Learn more about this in <Link href="https://github.com/bitcoin/bips/blob/master/bip-0146.mediawiki#low_s" target="_blank" className="underline">BIP 146</Link>.',
        success: 'The compute_input_signature() method looks good. Great Work!',
      },
    },
    put_it_together_five: {
      hard: {
        title: 'Putting it all together',
        heading: 'Populate the Witness',
        nav_title: 'Populate the Witness',
        paragraph_one:
          'Finish the method <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">sign_input(index: int, key: int)</span> that calls our step 7 method <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">compute_input_signature(index, key)</span> and handles its return value. The r and s numbers need to be encoded with an algorithm called DER which we have implemented for you.',
        paragraph_two:
          'Bitcoin requires one extra byte appended to the DER-signature which represents the "sighash type". For now we’ll always use the byte 0x01 for this indicating "SIGHASH ALL".',
        paragraph_three:
          'Once we have that signature blob we need to create a Witness object with two stack items: the signature blob, and your compressed public key. Push the signature first, followed by the public key.',
        paragraph_four:
          'The witness stack object can then be appended to the witnesses array of the transaction object.',
        success: 'The sign_input() method looks good. Great Work!',
      },
    },
    put_it_together_six: {
      hard: {
        title: 'Putting it all together',
        heading: 'Put it All Together',
        nav_title: 'Put it All Together!',
        paragraph_one:
          'We know our input, we know our output. Are we ready to build and sign a transaction? Not quite. We have a 1.61 BTC input and a 1 BTC output... what happens to the other 0.61 BTC? Most of that will be "change" and we need to send it back to our own address!',
        paragraph_two:
          'Write a script that creates and signs a Transaction object. It should have one input (the UTXO we identified in step 1) and two outputs:',
        paragraph_three:
          'But wait! We need to include a "fee". We\'ll shave off a tiny piece of our change output for the mining pools to incentivize them to include our transaction in a block. Let\'s reduce our change from 61,000,000 to 60,999,000 satoshis.',
        paragraph_four:
          'Finally our work is done. Your script should end by returning the result of the transaction <span className="text-green p-1 font-mono bg-[#0000004D] m-0.5 text-sm">serialize()</span> method. This is a valid signed bitcoin transaction and we can broadcast it to the network to send Mika 3000 the money he needs!',
        bullet_one:
          'Mika 3000 gets 100,000,000 satoshis to bc1qgghq08syehkym52ueu9nl5x8gth23vr8hurv9dyfcmhaqk4lrlgs28epwj',
        bullet_two:
          'You get 61,000,000 back to your address bc1qm2dr49zrgf9wc74h5c58wlm3xrnujfuf5g80hs',
        success: "You've done it! You've built a transaction!",
      },
    },
    outro_one: {
      title: 'Outro',
      nav_title: 'Chapter complete',
      heading: 'You did it!',
      paragraph_one:
        "You successfully built a transaction from scratch to pay Mika 3000 for her help. Now that we are done here let's see what we can find on Vanderpoole's island.",
    },
    resources: {
      in_out: {
        input_class_heading: 'Input Class',
        input_class_paragraph_one: 'Placeholder Resources',
        output_class_heading: 'Output Class',
        output_class_paragraph_one: 'Placeholder Resources',
      },
      put_it_together: {
        building_a_transaction_heading: 'Building a Transaction',
        building_a_transaction_paragraph_one: 'Placeholder Resources',
      },
    },
  },
  chapter_seven: {
    title: `Offense is the Best Defense`,
    paragraph_one:
      'You and Mika 3000 reach Vanderpoole’s private island first via plane and parachute, then via dune buggy, and then via rowboat that rows itself.',
    intro_one: {
      title: 'Intro',
      nav_title: 'Infiltrating the compound',
      paragraph_one:
        'You ask your compatriots whether they are worried about Vanderpoole’s army of security drones.',
      paragraph_two:
        '—HOLOCAT: “Give me 15 minutes. They’re basically birds, and I’m a cat. They don’t stand a chance.”',
      paragraph_three:
        'Holocat extends her claws and deals with Vanderpoole’s drone army pounce by pounce. Mika 3000 hands you a black turtleneck sweater, gloves, and a pair of night vision goggles.',
      paragraph_four:
        '—MIKA 3000: “You can’t do espionage in a Hawaiian shirt. What were you thinking? This isn’t another abandoned warehouse; this is a fortress. Here, I almost forgot. Take this grappling hook.”',
      paragraph_five:
        'Wondering what you’ve gotten yourself into, you and Mika 3000 scale the castle walls of Vanderpoole’s primary residence. To your surprise, his home overflows with pro-bitcoin art, books, and paper magazines. He is, or rather was, a true bitcoiner. A collection of miners dating back 125 years sit preserved in glass display cases. That’s when you see it: Vanderpoole’s workshop.',
    },
    intro_two: {
      nav_title: 'The control room',
      paragraph_one:
        'The gigantic room is a mess, though its layout is methodical. Remember when miners were clogging up the bitcoin network with empty blocks? Inside open notebooks, you find Vanderpoole’s designs for the backdoor that he used sketched out in detail. You were right: It was all a lie, yet one told not by a conniving villain but by a desperate believer in bitcoin whose company could no longer compete. To preserve his legacy, Vanderpoole infected the miners with a virus.',
      paragraph_two:
        'The virus replaces a section of the code used by all miners, regardless if they are part of a pool or not. It is the block building logic, the algorithm that assembles transactions into a block template. The template is still passed on to legitimate hashing code for proof-of-work. Templates are combined with zillions of different nonces while searching for a valid hash, but by the time one is found, the damage–the absence of any transactions in the block template, has been done.',
      paragraph_three:
        '—HOLOCAT: “What a loss. His family was once great. It’s so sad to see the Vanderpoole’s come to this.”',
    },
    intro_three: {
      nav_title: 'Correcting the software',
      paragraph_one:
        "But you can't just leave the crippled mining code on Vanderpoole's server to keep infecting all the mining pools. You have to fix it! As you read through the code, Holocat shows you a mempool display and it is filling up with unconfirmed transactions. The sooner this code gets fixed, the better.",
    },
    mempool_transaction_one: {
      title: 'Building blocks',
      nav_title: 'Assemble a block',
      heading: 'Code Challenge',
      python: {
        paragraph_one:
          'This is the code you find on Vanderpoole\'s server. It imports the current mempool from a JSON file and stores all the unconfirmed transactions in memory as instances of the MempoolTransaction class. The function that Vanderpoole has crippled is <span className="text-green">assemble_block()</span>. If you run the code as Vanderpoole left it, you will see the problem right away.',
      },
      javascript: {
        paragraph_one:
          'This is the code you find on Vanderpoole\'s server. It imports the current mempool from a JSON file and stores all the unconfirmed transactions in memory as instances of the MempoolTransaction class. The function that Vanderpoole has crippled is <span className="text-green">assembleBlock()</span>. If you run the code as Vanderpoole left it, you will see the problem right away.',
      },
      paragraph_two: {
        a: 'You need to fix the block assembly function not only to build valid blocks but also maximize the fees in the block, so the miners can earn the most profit possible given the consensus rules. The most critical consensus rules you will need to pay attention to restrict the total ',
        b: {
          text: 'transaction weight ',
          href: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520are%2520weighted%2520units',
          question: 'What are weighted units?',
        },
        c: ' and the ',
        d: {
          text: 'order of transactions ',
          href: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520order%2520do%2520transactions%2520need%2520to%2520be%2520in%2520a%2520block',
          question: 'What order do transactions need to be in a block?',
        },
        e: ' in the block.',
      },
      paragraph_three:
        'You can make the following assumptions to complete your mission:',
      bullet_one:
        'All transactions in the mempool have already been verified as valid.',
      bullet_two:
        'The coinbase transaction, and the weight it contributes to the block, can be ignored.',
      paragraph_four:
        'You can view the entire raw mempool JSON file <Link href="https://github.com/saving-satoshi/resources/blob/main/chapter-7/mempool.json" target="_blank" className="underline">here</Link>.',
      paragraph_five:
        'Or browse an excerpt of the file in this table for some basic patterns:',
      headings: {
        item_one: 'Transaction ID',
        item_two: 'Fee',
        item_two_b: 'Satoshis',
        item_three: 'Weight',
        item_three_b: 'Weight units (WU)',
        item_four: 'Ancestors',
      },
      table_one: {
        footer:
          'View the json file  <Link href="https://github.com/saving-satoshi/resources/blob/main/chapter-7/mempool.json" target="_blank" className="underline">here</Link> for the rest of the transaction data',
      },
      poor: "It's a valid block, but can you do better? Try to collect more fees.",
      good: "It's a valid block, but you are not quite getting the most fees yet. Keep working, or continue, your choice.",
      success: "It's a valid block, and you optimized fees. Nice!",
    },
    outro_one: {
      title: 'Outro',
      nav_title: 'Chapter complete',
      heading: 'You did it!',
      paragraph_one:
        'You escape the compound and return home. Investors sell their BitRey shares en masse when the story drops, plummeting Vanderpoole’s net worth.',
    },
    resources: {
      mempool_transaction_one: {
        bytes_v_weight_heading: 'Bytes vs Weight Units',
        bytes_v_weight_paragraph_one:
          'In bitcoin block construction, "weight units" (WU) and "bytes" are two different metrics used to measure the size of transactions and blocks.',
        bytes_v_weight_subheading_bytes: 'Bytes',
        bytes_v_weight_paragraph_two:
          'Bytes refer to the raw size of a transaction or block in terms of actual data. It is the literal size of the transaction data when it is serialized (converted into a format that can be stored or transmitted). Before the implementation of Segregated Witness (SegWit), the block size was limited to 1 megabyte (1 MB), measured in bytes.',
        bytes_v_weight_subheading_wu: 'Weighted Units',
        bytes_v_weight_paragraph_three:
          'Weighted units are a more complex metric introduced with SegWit in Bitcoin Improvement Proposal 141 <Link href="https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Other_consensus_critical_limits" target="_blank" className="undeline">BIP 141</Link>. This system aims to more fairly allocate block space by considering the impact of witness data separately.',
        bytes_v_weight_paragraph_four:
          'In our lesson here its just important to note we are using weight units to calculate the maximum block size and the same for each tx so make sure your block does not exceed the maximum size of 4000000 weight units.',
      },
    },
  },

  chapter_eight: {
    title: 'Twenty-One Million',
    paragraph_one: `Thanks to your investigation, people really want to hear from you, so you boop Holocat’s nose, revealing an invitation from Deborah Chunk, who invites you to appear in person at the offices of LARGE BIG NEWS Studios. Getting the story out is important, so you once again hop into your Budgetcopter.`,
    intro_one: {
      title: 'Intro',
      nav_title: `Vanderpoole's Deception`,
      paragraph_one: `—DEBORAH CHUNK: “These documents expose the alleged lies of Thomas Vanderpoole in a way that is certainly historic, scandalous even. The first thing people will most want to know is whether you acted alone. The second is where you got your information.”`,
      paragraph_two: `You tell her about Holocat and Holocat only. You lie and say the information was delivered directly to you and Mika 3000 by someone claiming to be Satoshi Nakamoto, who you suspect is actually a hacker collective. This last point causes Thomas Vanderpoole to call directly into the show.`,
    },
    intro_two: {
      title: `Intro`,
      nav_title: ` Vanderpoole's Anger`,
      paragraph_one: `—THOMAS VANDERPOOLE: “My family is Satoshi Nakamoto! Do you see what this hootenanny just said? He just admitted to working with hackers, a collective that only uses the name Satoshi Nakamoto to claim a legacy that is rightfully mine. This scoundrel is lying to undermine the protests of bitcoiners who are rightfully upset about the elimination of block rewards!”`,
      paragraph_two: `Vanderpoole continues to hurl two century-old insults at you. He calls you a varmint, a rapscallion, a yellow belly, a greenhorn, and more. You almost feel bad for him. His family was undeniably important to bitcoin’s history, even if his claims about Satoshi Nakamoto are transparently fake.`,
    },
    intro_three: {
      intro: `Intro`,
      nav_title: `Allegations Against Vanderpoole`,
      paragraph_one: `—DEBORAH CHUNK: “Mr. Vanderpoole, if I may. People are confused and uncertain about whether the bitcoin supply has been tampered with. Can you prove that you played no part in alleged tampering? Mysterious hacker and his holocat, can you prove Vanderpoole attempted this crime against bitcoin?”`,
    },
    building_blocks_one: {
      title: 'Building blocks',
      nav_title: 'Finding the chain tip',
      paragraph_one: {
        a: 'You know that Vanderpoole has been trying to confuse people by mining blocks that generate more bitcoin than they are allowed to, ultimately inflating the money supply. These blocks are invalid because they break hard-coded protocol rules, but they might still fool some people running buggy or malicious software, or ',
        b: {
          text: 'light clients',
          href: 'https://chat.bitcoinsearch.xyz/?author=holocat&question=what%2520are%2520light%2520clients%253F',
          question: 'What are light clients?',
        },
        c: ' that do not fully verify network data.',
      },
      paragraph_two: `You also know that somewhere on the network is a chain of valid blocks from the genesis block to today's "chain tip", where every transaction and block follows the rules. This chain is the only <span className="italic">real</span> chain, the only chain that matters, and the only chain where bitcoin's supply of 21 million original bitcoins is intact.`,
      paragraph_three:
        "Now, on live TV in front of the entire world, you need to find the longest valid blockchain and verify the coin supply's integrity. While you're at it, you'll also be able to prove that Vanderpoole has turned the bitcoin network into an invalid block minefield.",
    },
    building_blocks_two: {
      title: 'Building blocks',
      nav_title: 'A bitcoin block tree',
      paragraph_one:
        "Every block has exactly one preceding block, but could have more than one next block. Because of this, bitcoin blocks form more of a tree than a chain. Some of the branches are dead-ends and, as you must prove, some of the branches are invalid because of Vanderpoole's shenanigans.",
      paragraph_two:
        "Somewhere in this maze is a path from the genesis block to today's most recent block. You have to find it and tell Deborah Chunk which block is on the tip of the tree's most valid chain... before the next commercial break. Ahhh!",
      paragraph_three:
        'This artistic interpretation of bitcoin’s blockchain “tree” shows how every block has exactly one parent, but could have more than one child. Each block is labeled with its hash, and the hash of its parent (<span className="p-1 font-mono m-0.5 text-sm">prev</span>).',
      paragraph_four:
        'Some of these blocks are red because they are invalid. The longest path of blocks starting from the genesis block is colored green and represents the “most work” or “most valid” chain. Transactions in these blocks are the only truly “confirmed” transactions. Other valid blocks, the blue ones, don’t have as many descendants as the “most work” chain. They terminate in what are called <span className="italic">stale tips</span>.',
    },
    building_blocks_three: {
      title: 'Building Blocks',
      nav_title: `Explore the Bitcoin API`,
      heading: 'The Bitcoin API',
      paragraph_one: `To answer these questions, you'll need to interact with a bitcoin full node, via its JSON-RPC API. We've imported a library for you called <span className="p-1 font-mono bg-[#0000004D] m-1">bitcoin_rpc</span> which handles the secure HTTP connection from your script to the full node, executes your commands, and returns the responses. Your full node is \"pruning\" so it only has access to the last 300 blocks, but that should be enough to include the entire timespan of Vanderpoole's recent muckery.`,
      paragraph_two: `Let's start by getting familiar with the API. The library has one function that accepts one required argument, <span className="p-1 font-mono bg-[#0000004D] m-1">method</span> (a string) and one optional argument, <span className="p-1 font-mono bg-[#0000004D] m-1">params</span> (either a string or a number):`,
      paragraph_three:
        'The API also has a convenient "help" method! Ask it for help to learn more about the available commands, then pass the challenge by printing the current network difficulty.',
      success: "Nice work exploring the API! Let's move on.",
    },
    building_blocks_four: {
      title: 'Building Blocks',
      nav_title: `Find the Smallest Transaction Block`,
      heading: `Block Data`,
      paragraph_one: `Each bitcoin full node has a database. That's where blocks are stored and indexed by their hash. The full node keeps track of which blocks are candidates at each height in the chain with a second index that maps height -> [block hashes].`,
      paragraph_two: `The JSON-RPC API returns block data as JSON objects that include a property<span className="p-1 font-mono bg-[#0000004D] m-1">txs</span>which is an array of transaction objects.`,
      paragraph_three: `Retrieve all the block candidates at height 6929996 and print the hash of the block with the fewest transactions in it.`,
      success: `Nicely Done`,
    },
    building_blocks_five: {
      title: 'Building Blocks',
      nav_title: `Get the Transaction Fee`,
      heading: `Transaction Data`,
      paragraph_one: `The transaction objects confirmed in a block are JSON objects that include arrays of "inputs" and "outputs". Both of these arrays are lists of UTXOs, also known as "coins". Coin objects have a "value" property represented in satoshis.`,
      paragraph_two: `The "inputs" array is the coins spent (destroyed) by the transaction and the "outputs" array is the coins created by the transaction. You may recall from Chapter 6 that transactions always pay a fee to incentivize miners to include them in a block. That fee is exactly the difference in value between the total input and total output values of a transaction.`,
      paragraph_three: `In other words, the miner gets to keep whatever bitcoin that was sent in to the transaction but not sent back out to the transaction recipients.`,
      paragraph_four: `There is a transaction with the txid:`,
      paragraph_five: `in a block with the hash:`,
      paragraph_six: `Print that transaction's fee in satoshis.`,
      success: `Nicely Done`,
    },
    building_blocks_six: {
      title: 'Building Blocks',
      nav_title: 'Determine the subsidy',
      heading: 'The Coinbase Transaction',
      paragraph_one:
        'The first transaction in every block is called the coinbase. It may also be referred to as the "0th" transaction (referring to txs[0]) and it has a few very special properties. First of all, it has no inputs! This is because it does not spend any existing coins. Second, its output value is strictly defined by the protocol (despite what Vanderpoole might say!). This is the mechanism by which miners both collect fees from transactions, and generate new coins.',
      paragraph_two:
        "It's fairly easy to understand how total transaction fees in a block are summed up, but where does that block subsidy value come from? How does every participant in the bitcoin network determine exactly how much new bitcoin miners are allowed to generate at any given time?",
      paragraph_three:
        'This is the algorithm written by Satoshi Nakamoto that has remained an immutable core property of the bitcoin system since the beginning:',
      list_one:
        'Starting with the block #1 mined in 2009, the block subsidy is 50 BTC (or 5,000,000,000 satoshis)',
      list_two: 'Every 210,000 blocks that value is cut in half.',
      paragraph_four:
        'At block height 209,999 the subsidy was 50 BTC. In the very next block at height 210,000 the subsidy was 25 BTC, and so on. After 63 "halvings" the subsidy will be one single satoshi. The last halving will drop the subsidy to zero.',
      paragraph_five: 'AND THAT LAST HALVING WAS YESTERDAY!',
      paragraph_six:
        'Finish the implementation of the following function that accepts a block height as an argument and returns the value of the subsidy in satoshis.',
      success: 'The get_subsidy function looks great. Nice work!',
    },
    building_blocks_seven: {
      title: 'Building Blocks',
      nav_title: 'Get the Valid Block',
      heading: 'That Pernicious Scallywag!',
      paragraph_one: `There are four block candidates at height 6929851. Only one of them is a valid block, the other three were mined by Vanderpoole's cartel in reckless attempts to inflate the bitcoin money supply.`,
      paragraph_two: `Using the block subsidy function you wrote in the previous challenge and the JSON-RPC API, write a function to check the validity of a block candidate. Do this by checking if the coinbase output is correct. Your function should return true if the block is valid.`,
      paragraph_three: `Here's how your code will be used to find the one valid block at height 6929851:`,
      success: 'The validate block function looks great. Nice work!',
    },

    building_blocks_eight: {
      title: 'Building Blocks',
      nav_title: 'Showtime!',
      heading_one: 'Showtime!',
      paragraph_one: `The cameras are rolling, two billion humans worldwide are tuned in to the live stream. Only a few minutes remain until the next commercial break. Deborah Chunk is sweating. Somehow, Holocat is also sweating. Somewhere on the other end of the call, Vanderpoole must be sweating, too. This is your moment.`,
      paragraph_two: `Starting with the valid block just before the one you found at height 6929851, find the longest chain of valid blocks you can. Store the chain as an array of block hashes. While you're at it, maintain an array of every invalid block you find as well, just to show the world how hard Vanderpoole tried to break bitcoin. It doesn't matter what order these invalid block hashes are in, but your valid chain MUST start with the hash of block 6929850 followed by one block hash at each height all the way up to the chain tip.`,
      paragraph_three: `Vanderpoole is sneaky! He mined valid blocks on top of invalid blocks, and invalid blocks on top of short valid blocks! It's a maze, a minefield, out there. You may need to keep track of several valid branches as you traverse the tree. There will be valid blocks with valid parents that are not in the longest chain! In the end, there will be only one valid leaf with a greater height than all the others.`,
      paragraph_four: `Remember: Block objects returned by the JSON API have a property "prev" which identifies that block's parent by its hash:`,
      heading_two: `A block is ONLY valid if:`,
      paragraph_five: `Its coinbase output value is equal to the expected block subsidy plus the total transaction fees in the block.`,
      heading_three: `AND`,
      paragraph_six: `The block is a child of another VALID block. This is ensures a VALID CHAIN.`,
      paragraph_seven: `Return a JSON object with two arrays labeled "valid" and "invalid":`,
      success: 'The showtime function looks great. Nice work!',
    },
    outro_one: {
      title: 'Outro',
      nav_title: 'Chapter complete',
      heading: "We're doing it live!",
      paragraph_one:
        "You found the longest chain and proved it to everyone! You are one step closer to discrediting Vanderpoole. Needless to say he didn't answer anymore of Ms. Chunk's questions.",
    },
  },

  chapter_nine: {
    title: `Don't trust, verify.`,
    paragraph_one: `You demonstrated Vanderpoole’s invalid blocks and proved the most work chain, just in time. Its commercial break.`,
    paragraph_two: `Just then, Vanderpoole himself walks into the studio! He starts complaining that you have ruined his business and slandered his good family name.`,
    intro_one: {
      title: 'Intro',
      nav_title: 'Threats',
      paragraph_one:
        'Everyone is celebrating your success. You are smiling, the crew is smiling, Deborah Chunk is smiling. But there is one man on set who is not happy. A tall grey-haired man standing by the wall. The crowd parts and you see him face to face, for the first time: Vanderpoole! He is there!',
      paragraph_two:
        'He starts shouting at you. You have ruined his business and slandered his good family name. He threatens to sue you in court with all his might for the rest of your days.',
    },
    intro_two: {
      title: 'Intro',
      nav_title: 'Coming to terms',
      paragraph_one:
        'Just then, a TV network producer walks in and tells you and Deborah that viewers are calling in from all around the world that want to support your cause! You have lots of fans now and they all want to donate bitcoin to you! Deborah asks if you could provide a wallet address that they can broadcast on the air.',
      paragraph_two:
        'This makes Vanderpoole even more furious. He demands that you split the incoming donations with him or he will carry out his threat of endless lawsuits. Satisfy him, however, and he will leave you alone.',
      paragraph_three:
        'Your task is to create a bitcoin script contract with this untrustable counterparty, and make sure you (and Vanderpoole) can spend from it how and when you agree to.',
    },
    opcodes_one: {
      title: 'OpCodes',
      nav_title: 'Bitcoin script',
      heading: 'Bitcoin script',
      paragraph_one:
        "We mentioned bitcoin script back in chapter 6 but we didn't dwell on it because the coins you were spending were locked by a simple mechanism: a single signature and an implied script that evaluated that signature with a public key. Now things are going to get more interesting.",
      paragraph_two:
        'There are two important parts to spending a bitcoin output: A script and a stack.',
      paragraph_three: "We'll explore the two concepts at a high level first.",
    },
    opcodes_two: {
      title: 'OpCodes',
      nav_title: 'Bitcoin stack',
      heading: 'The stack',
      paragraph_one:
        "Think of a stack of books 📚. If you want to add a book, you have to place it on top of the stack, there's nowhere else for it to go. If you want to read a book, the only one you can access is the one on top of the stack. Even if you want more than one you have start at the top of the stack and work your way down. In computing terms, a stack is like an array of data items with two operations:",
      paragraph_two:
        '<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_PUSH</span> Add an item to the "top" of the stack.',
      paragraph_three:
        '<span className="text-[#3DCFEF] w-fit rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_POP</span> Remove the "top" item from the stack for processing.',
      subheading_one: 'Example:',
      stack_list_one:
        'Here is a stack: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">[]</span>',
      stack_list_two:
        'Push the number 1: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">[1]</span>',
      stack_list_three:
        'Push the number 2: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">[1, 2]</span>',
      stack_list_four:
        'Pop the top item off the stack: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">[1]</span>',
      paragraph_four:
        'Notice that the first item pushed on to the stack will be the last item popped off the stack, so it will be the last item processed by the script. For this reason the stack has an "upside down" or "backwards" feel to it, and the first thing you see on the stack will likely be the solution required at the end of script processing.',
      paragraph_five:
        'When spending a bitcoin transaction output, the elements required by the spender are provided in the witness of the spending transaction input (see chapter 6!) and those elements get pushed on to the stack before any script processing begins. We will refer to those items as the INITIAL STACK. They are important because they are literally the data that unlocks the script and allows the spender to spend coins!',
    },
    opcodes_three: {
      title: 'OpCodes',
      nav_title: 'OpCodes',
      heading: 'OpCodes',
      paragraph_one:
        'Script is a linear series of commands that are executed one by one, manipulating items on the stack. When the end of the script has been reached, there must be EXACTLY ONE NON-ZERO (NON-FALSE) ITEM remaining on the stack, or the entire operation is invalid and so is your bitcoin transaction. There are over 100 commands in the bitcoin script language, called "opcodes". We are only going to use a handful of them for this challenge.  ',
      paragraph_two:
        "Let's demonstrate an example where we lock up a bitcoin with the math problem 1 + 2 = ?. Whoever knows the answer to this math problem can spend the coins.",
      paragraph_three: 'The script would look like this:',
      paragraph_four:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_1 OP_2 OP_ADD OP_EQUAL</span>',
      paragraph_five:
        'This is script will be hashed and bech32-encoded into an address where someone can send coins.',
    },
    opcodes_four: {
      title: 'OpCodes',
      nav_title: 'The stack solution',
      heading: 'The stack solution',
      paragraph_one:
        "The stack solution would look like this: [3]. This is what the spending transaction would need in the witness of its input spending these coins. Let's step through it:",
      table_one: {
        headings: {
          item_one: 'Step',
          item_two: 'Stack',
          item_three: 'Script Execution',
        },
      },
      subheading_one: 'Explanation',
      stack_list_one:
        'init: the funding transaction output and spending transaction input are brought together.',
      stack_list_two:
        'step 1: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_1</span>pushes "1" onto the stack.',
      stack_list_three:
        'step 2: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_2</span>pushes "2" onto the stack.',
      stack_list_four:
        'step 3: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ADD</span>pops two items off the stack, adds them together, and pushes the sum back to the stack.',
      stack_list_five:
        'step 4: <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_EQUAL</span>pops two items off the stack, compares them, and pushes a boolean result back to the stack.',
      paragraph_two:
        'Now we have reached the end of the script and there is only a single TRUE item left on the stack - the coins are spent!',
      paragraph_three:
        "Hopefully it's obvious that if we started this example with a 4 on the stack, we would not be able to spend the coins. For these challenges we are going to use a very limited set of opcodes, which we will introduce by category",
    },
    opcodes_five: {
      title: 'OpCodes',
      nav_title: 'Compute basic arithmetic',
      heading: 'Basic Arithmetic',
      paragraph_one:
        'Bitcoin script can do simple math operations. You could lock coins using simple math but then anyone who can do math could spend the coins! In other words, do not try this on mainnet.',
      subheading_one:
        'Opcodes that push integers or arbitrary data to the stack',
      opconstants_list_one_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_0</span>',
      opconstants_list_one_paragraph: 'Pushes the number 0 on to the stack.',
      opconstants_list_two_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_1</span>',
      opconstants_list_two_paragraph: 'Pushes the number 1 on to the stack.',
      opconstants_list_three_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_2</span>',
      opconstants_list_three_paragraph: 'Pushes the number 2 on to the stack.',
      opconstants_list_four_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_3</span>',
      opconstants_list_four_paragraph: 'Pushes the number 3 on to the stack.',
      opconstants_list_five_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_DUP</span>',
      opconstants_list_five_paragraph:
        'Pushes a duplicate of the top stack item on to the stack.',
      opconstants_list_six_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_PUSH</span>',
      opconstants_list_six_paragraph:
        'Pushes the following script value on to the stack. Example values include SIG(alice), PUBKEY(alice), HASH256(secret), secret. Lowercase strings represent real-world data and the other opcodes in this interpreter will process them as if they are actual keys, signatures, hash digests and preimages.',
      subheading_two: 'Opcodes that do arithmetic',
      oparithmetic_list_one_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ADD</span>',
      oparithmetic_list_one_paragraph:
        'Pops two items off the stack, adds them together, pushes their sum back to the stack.',
      oparithmetic_list_two_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_EQUAL</span>',
      oparithmetic_list_two_paragraph:
        'Pops two items off the stack, compares their equality, pushes a boolean back to the stack.',
      oparithmetic_list_three_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_EQUALVERIFY</span>',
      oparithmetic_list_three_paragraph:
        'Like OP_EQUAL but throws an error and halts script execution immediately if the two items are not equal.',
      paragraph_two: 'Provide the initial stack to spend from the script.',
    },
    opcodes_six: {
      title: 'OpCodes',
      nav_title: 'Decode with cryptography',
      heading: 'Simple Cryptography',
      paragraph_one:
        'We\'ve explored "pay to public key hash" in previous chapters. This is the bitcoin script that was written explicitly in millions of transaction outputs before segregated witness came along and abbreviated it. Coins are locked by the hash of a public key. The spender must reveal the public key that matches that hash, and then provide a signature verified by that public key.',
      subheading_one: 'Opcodes that do simple cryptography',
      opcryptography_list_one_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm h-fit">OP_HASH256</span>',
      opcryptography_list_one_paragraph:
        'Pops one item off the stack, computes the double-SHA256 digest and pushes that digest back to the stack. In our exercise this operation is symbolized using strings. Example: The script OP_1 OP_HASH256 produces the stack [HASH256(1)]',
      opcryptography_list_two_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm h-fit">OP_CHECKSIG</span>',
      opcryptography_list_two_paragraph:
        'Pops two items off the stack. The first item it pops must be a public key in the format PUBKEY(...). The second item must be a signature in the format SIG(...). If the strings inside the parentheses in both items are equal we consider that a valid ECDSA signature and push TRUE back to the stack, otherwise FALSE',
      paragraph_two: 'Provide the initial stack to spend from the script.',
    },
    opcodes_seven: {
      title: 'OpCodes',
      nav_title: 'Multisig',
      heading: 'Multisig',
      paragraph_one:
        'Multi-signature policies provide a list of public keys and a number of signatures required for a valid spend. It can be described as "m-of-n" meaning "m number of signatures are required from this list of n public keys". The public keys and the m and n values are typically included in the locking script and the spender only needs to provide the right number of signatures.',
      paragraph_two:
        'Holocat appears with a pre-recorded message from Satoshi Nakamoto!',
      paragraph_three:
        'Hi. I accidentally wrote a bug when I implemented <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKMULTISIG</span>. It pops an extra item off the stack that isn\'t used at all. UMMMMmmmmmm... WHOOPSIE! Sorry. That code is consensus-critical so every <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKMULTISIG</span> operation in bitcoin\'s past, present, and future will be forced to include a "dummy" element. Don\'t forget it! Or you won\'t be able to spend your multisig coins.',
    },
    opcodes_eight: {
      title: 'OpCodes',
      nav_title: 'Sign with multiple keys',
      heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-1">OP_CHECKMULTISIG</span>',
      subheading_one:
        'Processes m-of-n multi-signature by following this algorithm.',
      multisig_list_one:
        'Pop a single integer off the stack. This is the <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">n</span> value.',
      multisig_list_two:
        'Pop <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">n</span> number of items off the stack, these are all expected to be public keys of the format <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">PUBKEY(...)</span>',
      multisig_list_three:
        'Pop a single integer off the stack. This is the <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">m</span> value.',
      multisig_list_four:
        'Pop <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">m</span> number of items off the stack, these are all expected to be signatures of the format <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">SIG(...)</span>',
      multisig_list_five:
        'Pop an extra element off the stack for absolutely no reason at all.',
      multisig_list_six:
        'Iterate through each public key: Verify the key against the stack-topmost signature. If it is valid, remove both the key and the signature and continue with the next public key. If it is not valid, remove the public key only and continue to the next public key (which will begin by checking against that same topmost signature)',
      multisig_list_seven:
        'If all public keys have been tested and there are any signatures remaining, the operation fails.',
      multisig_list_eight:
        'Once all signatures have been removed the operation can finish early with success, even if more public keys are remaining.',
      paragraph_one:
        'Note that m <= n. There may be more public keys than signatures but never more signatures than public keys. Also note that the keys and signatures MUST be in the same order, even if some keys are not used to sign.',
      paragraph_two: 'Provide the initial stack to spend from the script.',
    },
    opcodes_nine: {
      title: 'OpCodes',
      nav_title: 'Wait to unlock',
      heading: 'Time Locks',
      paragraph_one:
        "Way back in the last century a document entitled BIP 65 proposed a new opcode to bitcoin which was eventually added to the consensus rules. It is used to require that the nLocktime of a transaction is at or above a value specified by the script. Bitcoin's consensus rules already prohibit including a transaction in a block if that block's height is greater than the transaction's nLocktime. In other words, this opcode makes a transaction unspendable until a the blockchain reaches a certain height some time in the future. Because it was added with a soft fork, it does NOT actually pop anything off the stack, meaning most uses will also require an <span className=\"text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm\">OP_DROP</span> as well.. If the opcode determines it is too early to include this transaction in a block, script evaluation stops immediately with an error.",
      subheading_one: 'Opcodes that do block timelocks',
      optimelock_list_one_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_DROP</span>',
      optimelock_list_one_paragraph: 'Pops one item off the stack, ignores it.',
      optimelock_list_two_heading:
        '<span className="flex items-center text-[#3DCFEF] w-fit rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKLOCKTIMEVERIFY</span>',
      optimelock_list_two_paragraph:
        'Reads (does not pop) the top stack item and interprets it as a block height. If the height argument consumed by the opcode is not at least equal to the NEXT block height, the operation is invalid.',
      paragraph_two: 'Provide the initial stack to spend from the script.',
    },
    opcodes_ten: {
      title: 'OpCodes',
      nav_title: 'Build some logic',
      heading: 'Conditionals',
      paragraph_one:
        'Just like any other good programming language, bitcoin script has logic branches! The path through the branches is typically chosen by the spender to pick which combination of authentication conditions they need to satisfy,',
      paragraph_two:
        '<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_IF</span> <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ELSE</span> <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ENDIF</span> Logic branches.',
      paragraph_three:
        '<span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_IF</span> pops one value off the stack and evaluates it as a boolean. If it is true, code execution continues up to <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ELSE</span> then skips to <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ENDIF</span>, otherwise it skips to <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ELSE</span> and continues executing to <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ENDIF</span>. Logic branches may be nested but every <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_IF</span> must be paired with an <span className="text-[#3DCFEF] rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_ENDIF</span> to close each branch, otherwise a the interpreter will throw an error and the script will fail.',
      paragraph_four: 'Provide the initial stack to spend from the script.',
    },
    proposal_one: {
      title: 'Advanced',
      nav_title: 'Back to The Story',
      heading: 'Back to The Story!',
      paragraph_one: `Nice Work! We've gone over most of the basic opcodes you will need when building the scripts for basic transactions. Now let's put them to the test in some scenarios.`,
      paragraph_two: `For each contract proposal you discuss, provide a bitcoin script and one valid spending stack.`,
    },
    proposal_two: {
      title: 'Advanced Challenge 1',
      nav_title: 'Sign cooperatively',
      heading: 'Advanced Challenge 1',
      paragraph_one: `The first thing Vanderpoole suggests is a 2-of-2 multisig. All funds that get donated will be split by you and him 50/50, which will be managed by you both signing all spending transactions from the donation address, so you will have to agree on all "withdraws"`,
      paragraph_two: `Vanderpoole hands you his public key, it's PUBKEY(vanderpoole) and yours is PUBKEY(me).`,
      paragraph_three: 'Provide the initial stack to spend from the script.',
      next_step_message: 'Looks good! Now lets try with your own signature.',
    },
    proposal_three: {
      title: 'Advanced Challenge 2',
      nav_title: 'Make him wait',
      heading: 'Advanced Challenge 2',
      paragraph_one: `Wait a minute, that doesn't make sense -- you don't want to deal with him forever! The new deal is, you get all donations for the next two hours while you are still on TV. After that, he can have whatever else trickles in. You take a look at The Bitcoin Block Clock on the wall in the studio and agree that block height 6930300 will be probably be mined in about two hours`,
      paragraph_two: `Remember Vanderpoole's public key, it's PUBKEY(vanderpoole) and yours is PUBKEY(me).`,
      paragraph_three: 'Provide the initial stack to spend from the script.',
      next_step_message: 'Looks good! Now lets try with your own signature.',
    },
    proposal_four: {
      title: 'Advanced Challenge 3',
      nav_title: 'Work with an oracle',
      heading: 'Advanced Challenge 3',
      paragraph_one:
        "Vanderpoole changes his mind again. He doesn't like that deal because of the unknowns. He decides he wants the first 1.0 BTC of total donations, and then you can spend the rest after that.",
      paragraph_two:
        'There is no way to check a total balance across multiple UTXOs in bitcoin script so you agree on an unbiased third-party oracle: Deborah Chunk! She will monitor the total donation amount on the blockchain and once they add up to at least 1.0 BTC she will announce, live on TV, the preimage to a hash value you will commit to in the script.',
      paragraph_three:
        'She generates a secure random nonce in private, then hands you the hash digest: <span className="text-[#3DCFEF] w-fit rounded-sm px-1.5 py-1 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">HASH256(FD3771E8)</span>. You can spend all the coins you receive once she reveals this secret, and not one satoshi one second earlier!',
      paragraph_four: `Remember Vanderpoole's public key, it's PUBKEY(vanderpoole) and yours is PUBKEY(me).`,
      paragraph_five: 'Provide the initial stack to spend from the script.',
      next_step_message:
        "Let's see if we used our signature with the preimage correctly.",
    },
    outro_one: {
      title: 'Outro',
      nav_title: 'Chapter Complete',
      heading: 'Coming to terms',
      paragraph_one:
        "Nice, you were able to come to an agreement that seems to make everyone happy. Let's go ahead and broadcast this transaction to set it in stone.",
    },

    resources: {
      opcodes_five: {
        arithmetic_heading: 'Arithmetic opcodes',
        arithmetic_paragraph:
          'In bitcoin script arithmetic operations like in math take in some inputs to conduct math operations on. In actual bitcoin script the inputs are limited to signed 32-bit integers but the output may overflow.',
        spoiler: `Put in two integers that give the sum of 3 in the initial stack`,
      },
      opcodes_six: {
        cryptography_heading: 'Cryptographic opcodes',
        cryptography_paragraph:
          'These opcodes are important in everyday transactions as they ensure the outputs can only be spent with the signature of the owner of that utxo. Note that there are no formal categories of opcodes and that they are only organzied by their hex code representation.',
        spoiler: `The script checks a signature against a hashed public key. Put a signature key first then a public key`,
      },
      opcodes_eight: {
        multisig_heading: 'Multisig opcodes',
        multisig_paragraph:
          '<span className="text-[#3DCFEF] rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKMULTISIG</span> has a notable bug that requires the stack to include another unused value on the top of the stack unrelated to the actual multisig.',
        spoiler: `It's a multisig script requiring two signatures, and the first value on the stack is a placeholder for a quirk in the CHECKMULTISIG operation.`,
      },
      opcodes_nine: {
        timelock_heading: 'Timelock opcodes',
        timelock_paragraph:
          'Bitcoin script can read the current block height allowing transactions to be locked based on bitcoin blocks in the future. the exact semantics of the actual <span className="text-[#3DCFEF] rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKLOCKTIMEVERIFY</span> can be found',
        timelock_link:
          '<Link target="_blank" href="https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki" className="underline">here</Link>.',
        spoiler: ` The script locks spending until a specific block height and then verifies the signature in the initial stack.`,
      },
      opcodes_ten: {
        conditionals_heading: 'Opcode logic',
        conditionals_paragraph:
          'Conditional opcodes allow for some basic programming logic branches.  While the conditional logic allows for a broad range of additional possibilities in bitcoin script, it is still limited in comparison to a traditional programming language.',
        spoiler: `The sum of the first two values on the intial stack is false, so the script follows the OP_ELSE branch.`,
      },
      proposal_two: {
        making_script_heading: 'Making script',
        making_script_paragraph:
          'Remember that scripts can only be validated if the finish with a single truthy value on the stack. some versions allow any truthy value but our script editor only allows for values equal to 1 or true.',
        tip: 'Don\'t forget about the bug in <span className="text-[#3DCFEF] rounded-sm px-1.5 h-[28px] font-mono bg-[#0000004D] m-0.5 text-sm">OP_CHECKMULTISIG</span> that requires the extra unused value on the stack!',
        spoiler: `Script Hint: This multisig arrangement needs both participants to sign. The script specifies that two signatures are required and includes both public keys.
Stack Hint: To satisfy the script, you need to provide both signatures. The 0 on the stack accounts for a specific behavior of the CHECKMULTISIG operation.`,
      },
      proposal_three: {
        tip: "Let's think about combining a conditional with some timelock to separate Vanderpoole's signature from yours.",
        spoiler: `Script Hint: The script allows spending under two conditions: before block 6930300 or after. Before the block, Vanderpoole can spend; after the block, you can.

Stack Hint: To spend before the specified block, Vanderpoole uses his signature. After the block, you use your signature and need to provide a 0 because the script has moved past the locktime verification.`,
      },
      proposal_four: {
        tip: 'The preimage will be revealed after an unknown amount of time so no need for using timelocks.',
        spoiler: `Script Hint: The script allows spending under two conditions: before the secret has been revealed or after. Before the block, Vanderpoole can spend; after the block, you both can.

Stack Hint: To spend before the secret is revealed, Vanderpoole uses his signature. After the secret is revealed, you use your signature, a hash of the secret, and provide a 0 because the script has moved past the unrevealed verification.`,
      },
    },
  },

  chapter_ten: {
    title: '10 billion connections',
    paragraph_one: `The ON-AIR light in the TV studio goes dark. Stagehands shut off their hover-cameras and start filing out after a long day. Mike Ramen puts his hand on your shoulder and says "Great work today! Now let's celebrate. I know a bar across the street that accepts bitcoin -- and what better way to honor Satoshi's vision of digital cash for the internet than exchanging some for beer!"`,
    intro_one: {
      title: 'Intro',
      nav_title: 'Intro',
      paragraph_one: `But something is different now. After your worldwide TV appearance, the rate of transactions on the bitcoin network has shot up, filling up blocks and increasing fees for miners. That's a good thing for a sustainable network of course, but it wouldn't feel quite right if you had to pay a $5 fee just to buy a $10 beer.`,
      paragraph_two: `The bar is called The Public Key Pub. The owner and bartender, Laszlo, welcomes you and Mike in with a big smile. Mike and Laszlo pull out their solar-powered mini cyber pads and tap a few holo-buttons each, then Laszlo pours a beer and hands it to Mike. As Mike raises the glass to you he says "no miner fees for off-chain payments! I bought this beer without confirming a transaction on the blockchain!" What?! How?!`,
      paragraph_three: `Laszlo says "You're smart enough to debug mining software and validate blocks, I bet you can figure out how to send bitcoin off-chain. I'll just guide you a little bit. We will set up a payment channel between you and me so you can buy some drinks."`,
    },
    intro_two: {
      title: 'Initial funds',
      nav_title: 'Initial Funds',
      heading_one: 'The initial funds',
      paragraph_one:
        'You have a confirmed UTXO in the blockchain for 100000 satoshis. Seems pretty simple to make an off-chain payment, right?',
      paragraph_two:
        'Your UTXO is output 0 of some transaction you were sent in the past. You will spend that UTXO in input 0 of the transaction you are about to create',
      paragraph_three:
        'Note how the tabs now represent transactions instead of code languages. You will interact with multiple transactions as you go through this chapter.',
    },
  },

  ///CHALLENGE PAGE
  challenge_list: {
    coming_soon: 'Coming soon. Hang tight.',
  },

  chapter: {
    chapter_locked_one: 'Complete Chapter',
    chapter_locked_two: 'to unlock.',
    coming_soon: 'Coming soon. Hang tight.',
    description:
      'Explore the mysteries of Satoshi and learn about bitcoin along the way.',
  },

  hero: {
    title: 'Saving Satoshi',
    description: 'Code your way through the mysteries of bitcoin.',
    start_journey: 'Start',
    tell_more: 'Tell me more',
  },

  footer: {
    paragraph_one: 'An open-source production by the bitcoin community.',
    link: 'Check the code',
  },

  navbar: {
    intro: 'Intro',
    chapter: 'Chapter',
    chapter_complete: 'Chapter complete',
    challenge: 'Challenge',
    help_tooltip: 'Need help?',
  },

  modal_signin: {
    heading: 'Sign in',
    pre_signin_paragraph_one:
      'Enter your private key below to restore your account and progress.',
    post_signin_paragraph_one:
      'Nice to see you return to save Satoshi! You can go directly to your last lesson from here.',
    prompt: 'Enter your private key',
    confirm: 'Sign in',
    create_account: 'Don’t have an account?',
    login: 'Log in',
    welcome_back: 'Welcome back!',
    progress_redirect: 'Take me to where I left off',
  },

  modal_logout: {
    heading: 'You are logged in',
    paragraph_one:
      'Your session will remain active until you sign out using the button below.',
    private_key: 'Your private key',
    signout: 'Sign out',
  },

  modal_signup: {
    heading: 'Save your progress',
    paragraph_one:
      'Copy and store a simple code to save and load your progress in this browser. If you already have a code, load your progress here.',
    subheading_one: 'Choose an avatar',
    subheading_two: 'Back up your private key',
    generate:
      'All set? Code copied and backed-up? Make sure your do, as it can’t be recovered if you lose it.',
    confirm: 'Done',
    acknowledged:
      'I acknowledge I have saved this private key and know that I will need it for challenges in the future.',
  },

  difficulty_selection: {
    NORMAL: 'Enable hard mode to increase the difficulty of the challenges.',
    HARD: 'Disable hard mode to decrease the difficulty of the challenges.',
  },

  social: {
    twitter_share: 'Share via X',
    nostr_share: 'Share via nostr',
    sharing: 'Sharing...',
    shared: 'Shared!',
    share_error: 'Failed to share',
  },

  disclaimer: {
    description:
      'We’re excited for you to dive in. Note that some challenges require basic programming experience (tips are available). Give it a try and share your <Link href="https://docs.google.com/forms/d/e/1FAIpQLSf1xpNqUYJyvYL5IZDnxy78273pkqzfYW2Hf91H4Do4KHgy9g/viewform?usp=sf_link" className="underline">feedback</Link>',
  },

  opcode: {
    run: 'Run the Script',
    reset: 'Reset',
  },

  status_bar: {
    begin_message: 'Complete the challenge above to continue...',
    error_message: 'Hm... that is not quite right yet...',
    in_progress_message: 'Looking good so far...',
    success_message: 'Nicely done!',
    next_step_message: 'Looks good now lets move on to the next step.',
    try_again: 'Try again',
    next: 'Next',
  },

  hasher: {
    placeholder: 'Type here...',
    return_hash: 'Below you will see your input converted to a hash',
  },

  hashrate: {
    start: 'Start',
    running: 'Running',
    blocks_found: 'Blocks found',
    hashrate: 'Hashrate',
    partial_solutions: 'Partial solutions',
  },

  runner: {
    run: 'Run the script',
    running: 'Running',
    pause: 'Pause',
    result: 'Result',
    computing: 'Computing...',
    evaluation: 'Evaluation',
    script_output: 'Script output',
    waiting: 'Waiting for your input above...',
    poor: "This is valid code but it's not quite what we are looking for. Try again.",
    good: 'Good job, its not quite perfect but still considered correct. Keep working or continue, your choice.',
    success: 'Great work your code looks great!',
    language_tabs: {
      locked: "Language disabled since you've started this chapter in",
      reset: 'Reset the terminal',
    },
  },
  notfound: {
    first: 'Hmm...where are we?',
    second: 'It’s not quite clear where or what this place is.',
    third: 'We might have gotten lost in space (or time).',
    back_safety: 'Back to safety',
  },
  error: {
    first: 'Something is wrong!',
    second: 'Holocat may have chewed on some cables again. Bad cat!',
    reload: 'Retry',
  },
  help_page: {
    main_heading: 'Learning Resources',
    main_subheading:
      'What helpful info and resources can we provide for further learning?',
    tips_heading: 'Tips',
    tips_subheading:
      'What specific tips can/do we want to give learners if they are stuck?',
    spoilers_heading: 'Spoilers',
    spoilers_confirm: 'Yes, I want to see the solution',
    pseudo_confirm: 'Yes, I want to see the pseudocode',
    solution: 'Solution to this challenge',
    pseudo_solution: 'Pseudocode solution to this challenge',
    solution_one: 'Solution to part one of this challenge',
    feedback:
      'Your feedback is valuable and helps us in enhancing our work more, please give us feedback using <a href="https://docs.google.com/forms/d/e/1FAIpQLSf1xpNqUYJyvYL5IZDnxy78273pkqzfYW2Hf91H4Do4KHgy9g/viewform" target="_blank" rel="noreferrer">this link</a>. ',
    help_suggestion:
      'If you\'re ever stuck, press the "?" button in the top-right corner. It provides helpful resources and tips.',
  },
}
export default translations
